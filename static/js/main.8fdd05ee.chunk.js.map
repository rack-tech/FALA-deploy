{"version":3,"sources":["assets/Badminton_Court.svg","assets/badminton_shuttle.png","assets/left_boot.png","assets/right_boot.png","2D/Layout.jsx","assets/3d_court.svg","assets/3d_court_colored_flat.svg","assets/Side_view.svg","assets/Side_view_flat.svg","3D/Layout.jsx","Dash/ButtonComponent.jsx","templates/3D-templates/FrontCourt3D/Basic-Demonstration.svg","Dash/templates.jsx","Dash/dash.tsx","index.tsx"],"names":["Layout2D","useDisclosure","isObjectsDrawerOpen","isOpen","onObjectsDrawerOpen","onOpen","onObjectsDrawerClose","onClose","isSimulationControlsDrawerOpen","onSimulationControlsDrawerOpen","onSimulationControlsDrawerClose","isControlsDrawerOpen","onControlsDrawerOpen","onControlsDrawerClose","isSimulationListsDrawerOpen","onSimulationListsDrawerOpen","onSimulationListsDrawerClose","isPersonizationDrawerOpen","onPersonizationDrawerOpen","onPersonizationDrawerClose","useColorMode","colorMode","toggleColorMode","boxDiv","useRef","useState","boxW","boxH","dims","setDims","canvasTitle","canvas","setCanvas","canvasJSON","canvasSVG","canvasRecorder","canvasStream","canvasrecordingChunks","currentObject","setCurrentObject","canvasObjects","mode","setMode","saveSettings","keepObjects","exportAs","isDown","startX","startY","useReducer","x","forceUpdate","showRefLines","setShowRefLines","refLineX","setRefLineX","refLineY","setRefLineY","arrayOfRallies","currentActiveIndex","rallies","isNameControlOpen","onNameControlOpen","onNameControlClose","isSaveCanvasOpen","onSaveCanvasOpen","onSaveCanvasClose","rallyOrFootworkName","gridLines","show","numRows","numColumns","gridLineRefs","arrayOfFootwork","footworks","showAllRallies","showAllFootworks","runFlag","shuttleAnimationObject","rightFootworkAnimationObject","leftFootworkAnimationObject","footworkAnimationObject","initCanvas","fabric","Canvas","height","width","loadSVGFromURL","CourtSVG2","objects","options","Image","prototype","getSvgSrc","this","toDataURLforSVG","el","util","createCanvasElement","_element","naturalWidth","naturalHeight","getContext","drawImage","toDataURL","Object","transparentCorners","cornerColor","cornerStyle","borderColor","obj","groupSVGElements","set","selectable","scaleX","scaleY","add","setBackgroundColor","useEffect","current","clientWidth","clientHeight","clear","updateSelectedObject","getActiveObject","on","setTimeout","clearMouseListeners","off","addObjectToArray","object","push","addShoeObject","isRightBoot","isDrawingMode","i","length","event","getPointer","e","y","fromURL","RightBoot","img","left","top","scaleToWidth","flipX","saveCanvas","toDatalessJSON","toSVG","objectsMenu","name","icon","func","circle","Circle","radius","fill","stroke","strokeWidth","currPosX","Math","abs","renderAll","rectangle","Rect","hasControls","currPosY","ellipse","Ellipse","originX","originY","rx","ry","angle","triangle","Triangle","line","Line","x2","y2","setCoords","p","IText","fontFamily","fontSize","Shuttle","canvasControlMenu","activeObject","console","log","splice","remove","window","confirm","getObjects","clearCanvas","showGrids","incrementValueX","incrementValueY","strokeDashArray","j","initGridLines","checkHalfVertical","YValue","clearAllRallyObjects","objectHistory","drawRallyObjectsOnCanvas","showCurrentOnly","constructRally","clearAllFootworkObjects","currentX","currentY","shots","lastY","color","editable","group","Group","alert","drawFootworkObjectsOnCanvas","constructFootwork","movements","rect","drawOneRallyLine","lastActiveAnimation","atan2","PI","animate","duration","onChange","bind","onComplete","drawOneFootworkLine","simulationRefs","midX","parseInt","midY","verticalLine","horizontalLine","simulationOptions","simulationOperations","colorScheme","undefined","isNaN","waitFlag","runCurrentShuttleAnimation","right","LeftBoot","runCurrentFootworkAnimation","pop","recordingOperations","document","querySelector","captureStream","MediaRecorder","mimeType","ondataavailable","data","size","start","state","resume","pause","stop","blob","Blob","type","download","leftPanel","prop","handleButtonProps","map","item","idx","bg","value","m","borderRadius","onClick","property","handleNumberProps","aria-label","min","max","step","isDisabled","defaultValue","onChangeEnd","val","currentBackgroundColor","useColorModeValue","currentLineColor","div","mt","isBrowser","isMobile","isTablet","direction","display","overflow","h","columns","overflowY","placement","arrowSize","variant","_hover","index","allowToggle","defaultIndex","flex","textAlign","w","label","border","borderWidth","alignContent","maxH","align","as","target","templateColumns","gap","colSpan","children","ralliesOrFootwork","l","mb","isChecked","checked","justifyContent","alignItems","spacing","aria-colspan","focusBorderColor","placeholder","setSimulationMenu","minW","ref","id","py","leftIcon","setSimulationMenuForMobile","my","autoFocus","mx","randomColor","luminosity","lastActiveAnimationRef","onMouseUp","file","content","canvasData","rallyData","footworkData","JSON","stringify","Layout3D","props","templateName","useParams","loader","flat","FrontCourt3d","FrontCourt3dFlat","SideCourt3d","SideCourt3dFlat","YVal","flexGrow","ButtonComponent","role","maxW","minH","boxShadow","rounded","pos","zIndex","fontWeight","head","_after","transition","filter","_groupHover","objectFit","src","pt","letterSpacing","body","Templates","templateMapper","BasicDemoImg","path","to","Dash","LayoutComponentPopulated","mapper","arg","Court2D","FrontCourt3D","FrontCourt3DFlat","SideCourt3D","SideCourt3DFlat","pl","exact","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8fdd05ee.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Badminton_Court.82d3bb86.svg\";","export default __webpack_public_path__ + \"static/media/badminton_shuttle.147c0e01.png\";","export default __webpack_public_path__ + \"static/media/left_boot.11670476.png\";","export default __webpack_public_path__ + \"static/media/right_boot.f332f0d3.png\";","import \"./Layout.css\";\nimport CourtSVG2 from \"../assets/Badminton_Court.svg\"\nimport Shuttle from \"../assets/badminton_shuttle.png\";\nimport LeftBoot from \"../assets/left_boot.png\"\nimport RightBoot from \"../assets/right_boot.png\";\nimport download from 'downloadjs'\n\nimport { useEffect, useReducer, useRef, useState } from \"react\";\nimport {\n    Box,\n    chakra,\n    Button,\n    Stack,\n    Tooltip,\n    Text,\n    Flex,\n    Center,\n    SimpleGrid,\n    useColorMode,\n    useColorModeValue,\n    VStack,\n    InputGroup,\n    InputLeftAddon,\n    useDisclosure,\n    OrderedList,\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalCloseButton,\n    ModalBody,\n    Input,\n    ModalFooter,\n    ListItem,\n    Checkbox,\n    Grid,\n    GridItem,\n    Popover,\n    PopoverBody,\n    PopoverHeader,\n    PopoverArrow,\n    PopoverCloseButton,\n    PopoverTrigger,\n    PopoverContent,\n    Accordion,\n    AccordionItem,\n    AccordionButton,\n    AccordionPanel,\n    Slider,\n    SliderTrack,\n    SliderFilledTrack,\n    SliderThumb,\n    Drawer,\n    DrawerBody,\n    DrawerHeader,\n    DrawerOverlay,\n    DrawerContent,\n    DrawerCloseButton,\n    Select\n} from \"@chakra-ui/react\";\n\nimport { fabric } from \"fabric\";\nimport randomColor from 'randomcolor'\n\nimport {\n    BiCircle,\n    BiEdit,\n    BiGridSmall,\n    BiPointer,\n    BiText,\n    BiTrash,\n    BsSquare,\n    BsTriangle,\n    GiMagnifyingGlass,\n    GiShuttlecock,\n    IoEllipseOutline,\n    RiSubtractLine,\n    RiFootprintFill,\n    BsPlusCircle,\n    BiPlayCircle,\n    BiPauseCircle,\n    BiStopCircle,\n    BsPauseFill,\n    BiUndo,\n    AiOutlineClear,\n    MdDelete,\n    BiSave,\n    AiOutlineBgColors,\n    VscSymbolProperty,\n    AiOutlineReload,\n    BsSun,\n    BsMoon,\n    GiRunningShoe,\n    FaShapes,\n    RiRemoteControl2Line,\n    GiGears,\n    IoIosListBox,\n    BiCustomize,\n    AiOutlineDownload,\n    BiVideoRecording,\n    BsStopFill,\n    BsDownload,\n    BsPlayFill\n} from \"react-icons/all\";\n\nimport {\n    isMobile,\n    isTablet,\n    isBrowser,\n} from 'react-device-detect'\n\n// Layout Function has Layout of Court as well as controls\n\nexport default function Layout2D() {\n\n    // Drawer for Mobile Devices\n    const { isOpen: isObjectsDrawerOpen, onOpen: onObjectsDrawerOpen, onClose: onObjectsDrawerClose } = useDisclosure()\n    const { isOpen: isSimulationControlsDrawerOpen, onOpen: onSimulationControlsDrawerOpen, onClose: onSimulationControlsDrawerClose } = useDisclosure()\n    const { isOpen: isControlsDrawerOpen, onOpen: onControlsDrawerOpen, onClose: onControlsDrawerClose } = useDisclosure()\n    const { isOpen: isSimulationListsDrawerOpen, onOpen: onSimulationListsDrawerOpen, onClose: onSimulationListsDrawerClose } = useDisclosure()\n    const { isOpen: isPersonizationDrawerOpen, onOpen: onPersonizationDrawerOpen, onClose: onPersonizationDrawerClose } = useDisclosure()\n\n\n    // Color Mode State Variable\n    const { colorMode, toggleColorMode } = useColorMode();\n\n    /**\n     * Following State Variables are required to Draw Canvas,\n     * its height, width, etc.\n     */\n\n    // Create Reference to parent Box\n    const boxDiv = useRef(null);\n\n    // Get Dimensions of parent Box\n    const [dims, setDims] = useState({\n        boxW: 0.1,\n        boxH: 0.1,\n    });\n\n    // Canvas Title\n    const canvasTitle = useRef(\"Untitled\")\n\n    // Initialize Canvas\n    const [canvas, setCanvas] = useState(null);\n\n    // Canvas object for storing and downloading\n    const canvasJSON = useRef(null)\n    const canvasSVG = useRef(null)\n\n    // Canvas Recording Object\n    const canvasRecorder = useRef(null)\n    const canvasStream = useRef(null)\n    const canvasrecordingChunks = useRef([])\n\n    // Variable to store current selected object\n    const [currentObject, setCurrentObject] = useState(null);\n\n    // Variable to Keep Track of added Objects\n    const canvasObjects = useRef([]);\n\n    // Create a Mode Variable to Highlight which mode is active\n    const [mode, setMode] = useState(\"Pointer\");\n\n    // Save Settings Reference Variable\n    const saveSettings = useRef({\n        keepObjects: false,\n        exportAs: 'image/svg+xml;charset=utf-8'\n    })\n\n    /**\n     * Variables for Drawing Objects\n     */\n\n    let isDown = false;\n    let startX = 0;\n    let startY = 0;\n\n    /**\n     * State Variable to Force Re render on screen (of right menu)\n     * @returns None\n     * @updates None\n     */\n\n    const [, forceUpdate] = useReducer((x) => x + 1, 0);\n\n    /**\n     * Simulation Related State Variables\n     */\n\n    // Boolean value to show lines on click\n    const [showRefLines, setShowRefLines] = useState(true);\n\n    // Store references of lines that are drawn as reference lines\n    const [refLineX, setRefLineX] = useState(null);\n    const [refLineY, setRefLineY] = useState(null);\n\n    // Array to store all shots played\n    const arrayOfRallies = useRef({\n        currentActiveIndex: 0,\n        rallies: [],\n    });\n\n    // disclosure variables for controlling the change name modal\n    const { isOpen: isNameControlOpen, onOpen: onNameControlOpen, onClose: onNameControlClose } = useDisclosure();\n\n    // disclosure variable for save settings\n    const { isOpen: isSaveCanvasOpen, onOpen: onSaveCanvasOpen, onClose: onSaveCanvasClose } = useDisclosure()\n\n    // reference variable to get the rally name or footwork name\n    const rallyOrFootworkName = useRef(null);\n\n    // Store Gridlines and their values\n    const gridLines = useRef({\n        show: false,\n        numRows: 1,\n        numColumns: 1,\n    });\n\n    // Store Gridline references\n    const gridLineRefs = useRef([]);\n\n    // Array to store all footwork patterns\n    const arrayOfFootwork = useRef({\n        currentActiveIndex: 0,\n        footworks: [],\n    });\n\n    // Variable to keep track of show all rallies\n    const showAllRallies = useRef(false);\n\n    // Varaible to keep track of show all footworks\n    const showAllFootworks = useRef(false);\n\n    // Run animation flag\n    const runFlag = useRef(false);\n\n    // Shuttle Animation Object\n    const shuttleAnimationObject = useRef(null);\n\n    // Footwork Animaton Object\n    const rightFootworkAnimationObject = useRef(null);\n    const leftFootworkAnimationObject = useRef(null);\n    const footworkAnimationObject = useRef(null);\n\n\n    /**\n     * Initialize Canvas every time reload happens\n     * @updates {canvas}\n     * @returns canvas with appropriate height and width\n     */\n\n    const initCanvas = () => {\n        const canvas = new fabric.Canvas(\"canvas\", {\n            height: dims.boxH,\n            width: dims.boxW,\n        });\n        fabric.loadSVGFromURL(CourtSVG2, (objects, options) => {\n            fabric.Image.prototype.getSvgSrc = function () {\n                return this.toDataURLforSVG();\n            };\n\n            fabric.Image.prototype.toDataURLforSVG = function (options) {\n                var el = fabric.util.createCanvasElement();\n                el.width = this._element.naturalWidth || this._element.width;\n                el.height = this._element.naturalHeight || this._element.height;\n                el.getContext(\"2d\").drawImage(this._element, 0, 0);\n                var data = el.toDataURL(options);\n                return data;\n            };\n\n            fabric.Object.prototype.transparentCorners = false\n            fabric.Object.prototype.cornerColor = '#00008B'\n            fabric.Object.prototype.cornerStyle = 'circle'\n            fabric.Object.prototype.borderColor = 'red'\n            var obj = fabric.util.groupSVGElements(objects, options);\n            obj.set({\n                selectable: false,\n                scaleX: canvas.width / obj.width,\n                scaleY: canvas.height / obj.height,\n            })\n            canvas.add(obj)\n            canvas.setBackgroundColor('#68D391')\n        })\n        return canvas;\n    };\n\n    /**\n     * Get Parent Dimensions of Canvas\n     * and call initCanvas()\n     * @updates {canvas}\n     * @wrapper for initCanvas()\n     * @returns none\n     */\n\n    const loadCanvas = () => {\n        setDims({\n            boxW: boxDiv.current.clientWidth,\n            boxH: boxDiv.current.clientHeight,\n        });\n        if (canvas !== null) {\n            canvas.clear();\n        }\n        setCanvas(initCanvas());\n    };\n\n    /**\n     * @listens boxDiv\n     * Reloads Canvas on Change in Dimensions\n     * @returns none\n     */\n\n    useEffect(() => {\n        loadCanvas();\n        // eslint-disable-next-line\n    }, [boxDiv.current]);\n\n    /**\n     * Add Object Select Listener\n     * Add Object De-select Listener\n     * Following 2 functions do the above task\n     * First function is responsible for setting and unsetting of object variable\n     * Second function is required to check initialization of Canvas (exception handling)\n     * and setting listerners accordingly\n     * @updates {canvas}\n     * @returns none\n     */\n\n    const updateSelectedObject = () => {\n        setCurrentObject(canvas.getActiveObject());\n    };\n\n    // Check if Canvas is Initialized, if yes, add Object Listeners to it\n    (() => {\n        if (canvas === null) {\n            setTimeout(1000, this);\n        } else {\n            canvas.on(\"selection:created\", updateSelectedObject);\n            canvas.on(\"selection:updated\", updateSelectedObject);\n            canvas.on(\"selection:cleared\", updateSelectedObject);\n            canvas.on(\"object:modified\", updateSelectedObject);\n            return;\n        }\n    })();\n\n    /**\n     * Clears all Mouse Events for canvas\n     * @updates {canvas}\n     * @returns none\n     */\n\n    const clearMouseListeners = () => {\n        canvas.off(\"mouse:down\"); // Event Name\n        canvas.off(\"mouse:move\");\n        canvas.off(\"mouse:up\");\n    };\n\n    /**\n     * Receives object as a parameter\n     * Adds object to canvas\n     * @updates {canvasObjects, canvas}\n     * @returns None\n     */\n\n    const addObjectToArray = (object) => {\n        canvasObjects.current.push(object);\n    };\n\n    /**\n     * Draws Circle on Canvas with moving animation\n     * As per pointer on screen\n     * Uses only X value as radius, main differentiating factor between\n     * Circle and Ellipse\n     * Creates 1 circle and changes mode\n     * @returns none\n     * @updates {canvas, mode}\n     */\n\n    const addCircle = () => {\n        clearMouseListeners();\n        canvas.isDrawingMode = false;\n        setMode(\"Circle\");\n        let circle;\n\n        for (let i = 0; i < canvasObjects.current.length; i++) {\n            canvasObjects.current[i].set({\n                selectable: false,\n            });\n        }\n\n        canvas.on(\"mouse:down\", (event) => {\n            isDown = true;\n            startX = canvas.getPointer(event.e).x;\n            startY = canvas.getPointer(event.e).y;\n            circle = new fabric.Circle({\n                radius: 0,\n                left: startX,\n                top: startY,\n                selectable: true,\n                fill: \"transparent\",\n                stroke: \"black\",\n                strokeWidth: 3,\n            });\n            canvas.add(circle);\n            addObjectToArray(circle);\n\n            circle.set({\n                left: startX,\n                top: startY,\n            });\n        });\n\n        canvas.on(\"mouse:move\", (event) => {\n            if (isDown) {\n                let currPosX = canvas.getPointer(event.e).x;\n                circle.set({\n                    radius: Math.abs((startX - currPosX) / 2),\n                });\n                canvas.renderAll();\n            }\n        });\n\n        canvas.on(\"mouse:up\", () => {\n            isDown = false;\n            clearMouseListeners();\n            for (let i = 0; i < canvasObjects.current.length; i++) {\n                canvasObjects.current[i].set({\n                    selectable: true,\n                });\n            }\n\n            setMode(\"none\");\n            return;\n        });\n    };\n\n    /**\n     * Draws Rectangle/Square on Canvas with moving animation\n     * As per pointer on screen\n     * Creates 1 rectangle and changes mode\n     * @returns none\n     * @updates {canvas, mode}\n     */\n\n    const addRectangle = () => {\n        clearMouseListeners();\n        canvas.isDrawingMode = false;\n        setMode(\"Rectangle/Square\");\n        var rectangle;\n\n        for (let i = 0; i < canvasObjects.current.length; i++) {\n            canvasObjects.current[i].set({\n                selectable: false,\n            });\n        }\n\n        canvas.on(\"mouse:down\", (event) => {\n            isDown = true;\n            startX = canvas.getPointer(event.e).x;\n            startY = canvas.getPointer(event.e).y;\n            rectangle = new fabric.Rect({\n                hasControls: true,\n                height: 1,\n                width: 1,\n                left: startX,\n                top: startY,\n                selectable: true,\n                fill: \"transparent\",\n                stroke: \"black\",\n                strokeWidth: 3,\n            });\n            canvas.add(rectangle);\n            addObjectToArray(rectangle);\n        });\n\n        canvas.on(\"mouse:move\", (event) => {\n            if (isDown) {\n                let currPosX = canvas.getPointer(event.e).x;\n                let currPosY = canvas.getPointer(event.e).y;\n                rectangle.set({\n                    height: currPosY - startY,\n                    width: currPosX - startX,\n                });\n                canvas.renderAll();\n            }\n        });\n\n        canvas.on(\"mouse:up\", (event) => {\n            isDown = false;\n            clearMouseListeners();\n            for (let i = 0; i < canvasObjects.current.length; i++) {\n                canvasObjects.current[i].set({\n                    selectable: true,\n                });\n            }\n\n            setMode(\"none\");\n            return;\n        });\n    };\n\n    /**\n     * Draws Ellipse on Canvas with moving animation\n     * As per pointer on screen\n     * Uses X and Y values for drawing Ellipse\n     * Creates 1 Ellipse and changes mode\n     * @returns none\n     * @updates {canvas, mode}\n     */\n\n    const addEllipse = () => {\n        clearMouseListeners();\n        canvas.isDrawingMode = false;\n        setMode(\"Ellipse\");\n        var ellipse;\n\n        for (let i = 0; i < canvasObjects.current.length; i++) {\n            canvasObjects.current[i].set({\n                selectable: false,\n            });\n        }\n\n        canvas.on(\"mouse:down\", (event) => {\n            isDown = true;\n            startX = canvas.getPointer(event.e).x;\n            startY = canvas.getPointer(event.e).y;\n            ellipse = new fabric.Ellipse({\n                hasControls: true,\n                left: startX,\n                top: startY,\n                originX: \"left\",\n                originY: \"top\",\n                rx: 0,\n                ry: 0,\n                angle: 0,\n                selectable: true,\n                fill: \"transparent\",\n                stroke: \"black\",\n                strokeWidth: 3,\n            });\n            canvas.add(ellipse);\n            addObjectToArray(ellipse);\n        });\n\n        canvas.on(\"mouse:move\", (event) => {\n            if (isDown) {\n                let currPosX = canvas.getPointer(event.e).x;\n                let currPosY = canvas.getPointer(event.e).y;\n                ellipse.set({\n                    rx: (currPosX - startX) / 2,\n                    ry: (currPosY - startY) / 2,\n                });\n                canvas.renderAll();\n            }\n        });\n\n        canvas.on(\"mouse:up\", (event) => {\n            isDown = false;\n            clearMouseListeners();\n            for (let i = 0; i < canvasObjects.current.length; i++) {\n                canvasObjects.current[i].set({\n                    selectable: true,\n                });\n            }\n\n            setMode(\"none\");\n            return;\n        });\n    };\n\n    /**\n     * Draws Triangle on Canvas with moving animation\n     * As per pointer on screen\n     * Uses X and Y values for drawing Triangle\n     * Creates 1 Triangle and changes mode\n     * @returns none\n     * @updates {canvas, mode}\n     */\n\n    const addTriangle = () => {\n        clearMouseListeners();\n        canvas.isDrawingMode = false;\n        setMode(\"Triangle\");\n        var triangle;\n\n        for (let i = 0; i < canvasObjects.current.length; i++) {\n            canvasObjects.current[i].set({\n                selectable: false,\n            });\n        }\n\n        canvas.on(\"mouse:down\", (event) => {\n            isDown = true;\n            startX = canvas.getPointer(event.e).x;\n            startY = canvas.getPointer(event.e).y;\n            triangle = new fabric.Triangle({\n                hasControls: true,\n                height: 0,\n                width: 0,\n                left: startX,\n                top: startY,\n                selectable: true,\n                fill: \"transparent\",\n                stroke: \"black\",\n                strokeWidth: 3,\n            });\n            canvas.add(triangle);\n            addObjectToArray(triangle);\n        });\n\n        canvas.on(\"mouse:move\", (event) => {\n            if (isDown) {\n                let currPosX = canvas.getPointer(event.e).x;\n                let currPosY = canvas.getPointer(event.e).y;\n                triangle.set({\n                    width: currPosX - startX,\n                    height: currPosY - startY,\n                });\n                canvas.renderAll();\n            }\n        });\n\n        canvas.on(\"mouse:up\", () => {\n            isDown = false;\n            clearMouseListeners();\n            for (let i = 0; i < canvasObjects.current.length; i++) {\n                canvasObjects.current[i].set({\n                    selectable: true,\n                });\n            }\n\n            setMode(\"none\");\n            return;\n        });\n    };\n\n    /**\n     * Draws Line on Canvas with moving animation\n     * As per pointer on screen\n     * Uses X and Y values for drawing Line\n     * Creates 1 Line and changes mode\n     * @returns none\n     * @updates {canvas, mode}\n     */\n\n    const addLine = () => {\n        clearMouseListeners();\n        canvas.isDrawingMode = false;\n        setMode(\"Line\");\n        var line;\n\n        for (let i = 0; i < canvasObjects.current.length; i++) {\n            canvasObjects.current[i].set({\n                selectable: false,\n            });\n        }\n\n        canvas.on(\"mouse:down\", (event) => {\n            isDown = true;\n            startX = canvas.getPointer(event.e).x;\n            startY = canvas.getPointer(event.e).y;\n            line = new fabric.Line([startX, startY, startX, startY], {\n                left: startX,\n                top: startY,\n                selectable: true,\n                fill: \"transparent\",\n                stroke: \"black\",\n                strokeWidth: 3,\n            });\n            canvas.add(line);\n            addObjectToArray(line);\n        });\n\n        canvas.on(\"mouse:move\", (event) => {\n            if (isDown) {\n                let currPosX = canvas.getPointer(event.e).x;\n                let currPosY = canvas.getPointer(event.e).y;\n                line.set({\n                    x2: currPosX,\n                    y2: currPosY,\n                });\n                canvas.renderAll();\n            }\n        });\n\n        canvas.on(\"mouse:up\", () => {\n            isDown = false;\n            line.setCoords();\n            clearMouseListeners();\n            for (let i = 0; i < canvasObjects.current.length; i++) {\n                canvasObjects.current[i].set({\n                    selectable: true,\n                });\n            }\n\n            setMode(\"none\");\n            return;\n        });\n    };\n\n    /**\n     * Creates free Drawing Mode on Canvas\n     * @returns none\n     * @updates {canvas, mode}\n     */\n\n    const freeDraw = () => {\n        setMode(\"Draw\");\n        clearMouseListeners();\n        canvas.isDrawingMode = true;\n    };\n\n    /**\n     * Activates Pointer Mode on Canvas\n     * This is Default mode\n     * @updates {canvas, mode}\n     */\n\n    const pointerMode = () => {\n        clearMouseListeners();\n        setMode(\"Pointer\");\n        canvas.isDrawingMode = false;\n    };\n\n    /**\n     * Adds a p box to Canvas\n     * Uses current X and Y values to place the p box\n     * @returns none\n     * @updates {canvas, mode}\n     */\n\n    // Add Text to canvas\n    const addText = () => {\n        clearMouseListeners();\n        canvas.isDrawingMode = false;\n        // canvas.__eventListeners = {}\n        setMode(\"Text\");\n        var p;\n\n        for (let i = 0; i < canvasObjects.current.length; i++) {\n            canvasObjects.current[i].set({\n                selectable: false,\n            });\n        }\n\n        canvas.on(\"mouse:down\", (event) => {\n            startX = canvas.getPointer(event.e).x;\n            startY = canvas.getPointer(event.e).y;\n            p = new fabric.IText(\"Tap and Type\", {\n                fontFamily: \"Quicksand\",\n                left: startX,\n                top: startY,\n                fontSize: 30,\n            });\n\n            canvas.add(p);\n            addObjectToArray(p);\n        });\n\n        canvas.on(\"mouse:up\", () => {\n            for (let i = 0; i < canvasObjects.current.length; i++) {\n                canvasObjects.current[i].set({\n                    selectable: true,\n                });\n            }\n\n            setMode(\"none\");\n            clearMouseListeners();\n        });\n    };\n\n    /**\n     * Saves current State of canvas\n     * @returns None\n     */\n\n    /**\n     * Adds a Shuttlecock Object to Canvas\n     * Uses current X and Y values to place the shuttlecock image\n     * @updates {canvas}\n     * @returns None\n     */\n\n    const addShuttleObject = () => {\n        clearMouseListeners();\n        canvas.isDrawingMode = false;\n        // canvas.__eventListeners = {}\n        setMode(\"Shuttle Object\");\n\n        for (let i = 0; i < canvasObjects.current.length; i++) {\n            canvasObjects.current[i].set({\n                selectable: false,\n            });\n        }\n\n        canvas.on(\"mouse:down\", (event) => {\n            startX = canvas.getPointer(event.e).x;\n            startY = canvas.getPointer(event.e).y;\n            new fabric.Image.fromURL(Shuttle, (img) => {\n                img.set({\n                    left: startX,\n                    top: startY\n                })\n                img.scaleToWidth(40)\n                canvas.add(img);\n                addObjectToArray(img);\n            })\n\n        });\n\n        canvas.on(\"mouse:up\", () => {\n            for (let i = 0; i < canvasObjects.current.length; i++) {\n                canvasObjects.current[i].set({\n                    selectable: true,\n                });\n            }\n\n            setMode(\"none\");\n            clearMouseListeners();\n        });\n    }\n\n    /**\n     * Adds a Shoe Object to Canvas\n     * Uses current X and Y values to place the shuttlecock image\n     * @updates {canvas}\n     * @returns None\n     */\n\n    const addShoeObject = (isRightBoot) => {\n        clearMouseListeners();\n        canvas.isDrawingMode = false;\n        // canvas.__eventListeners = {}\n        setMode(\"Shuttle Object\");\n\n        for (let i = 0; i < canvasObjects.current.length; i++) {\n            canvasObjects.current[i].set({\n                selectable: false,\n            });\n        }\n\n        canvas.on(\"mouse:down\", (event) => {\n            startX = canvas.getPointer(event.e).x;\n            startY = canvas.getPointer(event.e).y;\n            new fabric.Image.fromURL(RightBoot, (img) => {\n                img.set({\n                    left: startX,\n                    top: startY\n                })\n                img.scaleToWidth(40)\n                if (!isRightBoot) {\n                    img.set({\n                        flipX: true\n                    })\n                }\n                canvas.add(img);\n                addObjectToArray(img);\n            })\n\n        });\n\n        canvas.on(\"mouse:up\", () => {\n            for (let i = 0; i < canvasObjects.current.length; i++) {\n                canvasObjects.current[i].set({\n                    selectable: true,\n                });\n            }\n\n            setMode(\"none\");\n            clearMouseListeners();\n        });\n    }\n\n    /**\n     * Function to save canvas in memory\n     * Uses current canvas to populate 2 variables : \n     * CANVAS image variable\n     * CANVAS json variable\n     */\n\n    const saveCanvas = () => {\n        canvasJSON.current = canvas.toDatalessJSON()\n        canvasSVG.current = canvas.toSVG()\n    }\n\n    /**\n     * Function to download canvas object\n     * Uses current canvas objects to download in the form of an image or json\n     */\n\n    const downloadCanvas = () => {\n\n        saveCanvas()\n        if (!saveSettings.current.keepObjects) {\n            clearAllRallyObjects()\n            clearAllFootworkObjects()\n        }\n\n        setMode(\"Pointer\")\n\n        setTimeout(() => {\n            let file;\n            if (saveSettings.current.exportAs === 'text/plain') {\n                let content = {\n                    canvasData: canvasJSON.current,\n                    rallyData: arrayOfRallies.current,\n                    footworkData: arrayOfFootwork.current\n                }\n                file = new Blob([JSON.stringify(content)], { type: saveSettings.current.exportAs })\n                download(file, canvasTitle.current + \" with sim. data.json\")\n            } else {\n                if (saveSettings.current.exportAs === 'image/svg+xml;charset=utf-8') {\n                    file = new Blob([canvasSVG.current], { type: saveSettings.current.exportAs });\n                    download(file, canvasTitle.current + \".svg\")\n                } else if (saveSettings.current.exportAs === 'image/png') {\n                    file = new Blob([canvasSVG.current], { type: saveSettings.current.exportAs });\n                    download(file, canvasTitle.current + \".png\")\n                } else {\n                    file = new Blob([canvasSVG.current], { type: saveSettings.current.exportAs });\n                    download(file, canvasTitle.current + \".jpg\")\n                }\n            }\n        }, 200);\n    }\n\n    /**\n     * Deletes Selected Item from Canvas\n     * @returns none\n     * @updates {canvas}\n     */\n\n    const deleteItem = () => {\n        clearMouseListeners();\n        canvas.isDrawingMode = false;\n        let activeObject = canvas.getActiveObject();\n\n        if (activeObject) {\n            console.log(\"Removing object\", activeObject, \"All : \", canvasObjects)\n            for (let i = 0; i < canvasObjects.current.length; i++) {\n                if (canvasObjects.current[i] === activeObject) {\n                    canvasObjects.current.splice(i)\n                }\n            }\n            canvas.remove(activeObject);\n        }\n    };\n\n    /**\n     * Removes all objects from Canvas\n     * @returns none\n     * @updates {canvas}\n     */\n\n    const clearCanvas = () => {\n        clearMouseListeners();\n        canvas.isDrawingMode = false;\n        let objects = canvas.getObjects();\n        for (var i = 0; i < objects.length; i++) {\n            canvas.remove(objects[i]);\n        }\n        canvas.renderAll();\n        // Remove everything from canvasObjects Array\n        canvasObjects.current = [];\n    };\n\n    /**\n     * Set Background Color for Canvas\n     */\n\n    const selectCanvasBackground = () => {\n        const list = [\"#68D391\", \"#FAF089\", \"#eedd82\", \"#82cda8\", \"#E9D8FD\", \"#FBD38D\", \"#81E6D9\", \"#90cdf4\", \"#E2E8F0\", \"#FC8181\", \"#48BB78\", \"#F0FFF4\", \"#90cdf4\", \"#F687B3\"]\n        return (\n            list.map((item) => (\n                <Button bg={item} value={item} m=\"1\" border='solid' borderWidth='thin' borderRadius={'100%'} size='sm' onClick={\n                    () => {\n                        canvas.setBackgroundColor(item)\n                        canvas.renderAll()\n                    }}> </Button>\n            ))\n        )\n    }\n\n    /**\n     * Controls Menu\n     * Calls all above functions as per options\n     */\n\n    const objectsMenu = [\n        {\n            name: \"Draw\",\n            icon: <BiEdit />,\n            func: freeDraw,\n        },\n        {\n            name: \"Pointer\",\n            icon: <BiPointer />,\n            func: pointerMode,\n        },\n        {\n            name: \"Circle\",\n            icon: <BiCircle />,\n            func: addCircle,\n        },\n        {\n            name: \"Rectangle/Square\",\n            icon: <BsSquare />,\n            func: addRectangle,\n        },\n        {\n            name: \"Ellipse\",\n            icon: <IoEllipseOutline />,\n            func: addEllipse,\n        },\n        {\n            name: \"Triangle\",\n            icon: <BsTriangle />,\n            func: addTriangle,\n        },\n        {\n            name: \"Line\",\n            icon: <RiSubtractLine />,\n            func: addLine,\n        },\n        {\n            name: \"Text\",\n            icon: <BiText />,\n            func: addText,\n        },\n        {\n            name: \"Shuttle Object\",\n            icon: <GiShuttlecock />,\n            func: addShuttleObject,\n        },\n        {\n            name: \"Right Boot\",\n            icon: <GiRunningShoe />,\n            func: () => addShoeObject(true),\n        },\n        {\n            name: \"Left Boot\",\n            icon: <GiRunningShoe />,\n            func: () => addShoeObject(false),\n        }\n    ];\n\n    /**\n     * Control Objects using a simple set of Controls\n     */\n\n    const canvasControlMenu = [\n        {\n            name: \"Save\",\n            icon: <BiSave />,\n            func: saveCanvas,\n        },\n        {\n            name: \"Download\",\n            icon: <AiOutlineDownload />,\n            func: onSaveCanvasOpen,\n        },\n        {\n            name: \"Delete\",\n            icon: <BiTrash />,\n            func: deleteItem,\n        },\n        {\n            name: \"Reload Canvas\",\n            icon: <AiOutlineReload />,\n            func: () => {\n                if (window.confirm(\"Do you really want to Reload Canvas? You will lose all your work\")) {\n                    // Get all Objects and Remove them one by one\n                    let objects = canvas.getObjects();\n                    for (var i = 1; i < objects.length; i++) {\n                        canvas.remove(objects[i]);\n                    }\n                    canvas.renderAll();\n\n                    // Remove everything from CanvasObjects array also\n                    canvasObjects.current = [];\n                }\n            }\n        },\n        {\n            name: \"Clear History\",\n            icon: <AiOutlineClear />,\n            func: () => {\n                if (\n                    window.confirm(\"Do you want clear canvas? It cannot be recovered.\")\n                ) {\n                    clearCanvas()\n                    initCanvas()\n                }\n            },\n        }, {\n            name: colorMode === \"light\" ? \"Dark Mode\" : \"Light Mode\",\n            icon: colorMode === \"light\" ? <BsMoon /> : <BsSun />,\n            func: toggleColorMode,\n        },\n    ];\n\n    /**\n     * Following Code is related to Simulation, all functions henceforth do either Animations\n     * or are responsible for creating Rallies and movement of objects on the Canvas\n     */\n\n    /**\n     * Given Dimensions of Canvas (Or Precisely of Badminton Court)\n     * Find MidpointX and MidPointY\n     * @returns none\n     * @updates {canvas, mode, refLineX, refLineY, dims}\n     */\n\n    const findMidOfCanvas = () => {\n        setShowRefLines(!showRefLines);\n        // console.log(showRefLines)\n        let midX = parseInt(dims.boxW / 2);\n        let midY = parseInt(dims.boxH / 2);\n        // console.log(dims, midX, midY)\n\n        // Create 2 lines that give estimate of reference points of court\n        var verticalLine = new fabric.Line([0, midY, dims.boxW, midY], {\n            selectable: false,\n            fill: \"transparent\",\n            stroke: \"red\",\n            strokeWidth: 5,\n        });\n        var horizontalLine = new fabric.Line([midX, 0, midX, dims.boxH], {\n            selectable: false,\n            fill: \"transparent\",\n            stroke: \"red\",\n            strokeWidth: 5,\n        });\n        if (showRefLines) {\n            setMode(\"Check\");\n            setRefLineX(horizontalLine);\n            setRefLineY(verticalLine);\n            canvas.add(horizontalLine);\n            canvas.add(verticalLine);\n        } else {\n            setMode(\"none\");\n            canvas.remove(refLineX);\n            canvas.remove(refLineY);\n        }\n    };\n\n    /**\n     *\n     * @param {number} numRows <Number of Rows to Divided into>\n     * @param {number} numColumns <Number of Columns to Divided into>\n     * @returns none\n     * @updates {gridLines.numColumns, gridLines.numRows, gridLineRefs}\n     * @todo Last 2 lines not yet visible => Done\n     */\n\n    const initGridLines = (numRows, numColumns) => {\n        if (gridLineRefs.length > 0) {\n            for (let i = 0; i < gridLineRefs.current.length; i++) {\n                canvas.remove(gridLineRefs.current[i]);\n                console.log(\"removed\", i);\n            }\n        }\n        gridLineRefs.current = []\n        console.log(\"REFS FLUSHED\", gridLineRefs.current.length)\n        gridLines.current.numRows = numRows\n        gridLines.current.numColumns = numColumns\n\n        let incrementValueX = (dims.boxW - 6) / numRows;\n        let incrementValueY = (dims.boxH - 6) / numColumns;\n\n        // Get Dimensions for each Grid Box\n\n        // for (let i = 3; i <= dims.boxW; i = i + incrementValueX) {\n        //     for (let j = 3; j <= dims.boxH; j = j + incrementValueY) {\n        //         console.log(i, j, dims.boxW, dims.boxH)\n        //     }\n        // }\n\n        console.log(gridLines.current.numColumns, gridLines.current.numRows);\n\n        for (let i = 3; i <= dims.boxW; i = i + incrementValueX) {\n            let line = new fabric.Line([i, 0, i, dims.boxH], {\n                selectable: false,\n                stroke: \"white\",\n                strokeWidth: 3,\n                strokeDashArray: [5, 5],\n            });\n            console.log(i);\n            gridLineRefs.current.push(line);\n        }\n\n        for (let j = 3; j <= dims.boxH; j = j + incrementValueY) {\n            let line = new fabric.Line([0, j, dims.boxW, j], {\n                selectable: false,\n                stroke: \"white\",\n                strokeWidth: 3,\n                strokeDashArray: [5, 5],\n            });\n            gridLineRefs.current.push(line);\n        }\n    };\n\n    /**\n     * @param {number} numRows <Number of Rows to Divided into>\n     * @param {number} numColumns <Number of Columns to Divided into>\n     * @returns none\n     * @updates {gridLines.show, canvas}\n     */\n\n    // Show Gridlines (Given N*M grid size)\n    const showGrids = () => {\n        setMode(\"Grids\");\n\n        gridLines.current.show = !gridLines.current.show\n\n        // console.log(gridLines)\n\n        if (gridLines.current.show) {\n            initGridLines(gridLines.current.numRows, gridLines.current.numColumns);\n            for (let i = 0; i < gridLineRefs.current.length; i++) {\n                // console.log(gridLineRefs[i])\n                canvas.add(gridLineRefs.current[i]);\n            }\n        } else {\n            setMode(\"none\");\n            for (let i = 0; i < gridLineRefs.current.length; i++) {\n                canvas.remove(gridLineRefs.current[i]);\n            }\n        }\n    };\n\n    /**\n     * Checks Value given and returns in which half\n     * the value resides vertically\n     * @param {number} YValue <Height of Canvas>\n     * @returns {2} if YValue is in lower half\n     * @returns {1} if YValue is in upper half\n     * @updates none\n     */\n\n    const checkHalfVertical = (YValue) => {\n        if (YValue > dims.boxH / 2) {\n            return 2;\n        } else {\n            return 1;\n        }\n    };\n\n    /**\n     * Remove all objects from all other rallies\n     * @updates None\n     * @return None\n     */\n\n    const clearAllRallyObjects = () => {\n        for (let i = 0; i < arrayOfRallies.current.rallies.length; i++) {\n            for (\n                let j = 0;\n                j < arrayOfRallies.current.rallies[i].objectHistory.length;\n                j++\n            ) {\n                canvas.remove(arrayOfRallies.current.rallies[i].objectHistory[j]);\n            }\n        }\n    };\n\n    /**\n     * Draw Rally Objects on screen as per demand\n     * If only current one is to be displayed\n     * @param showCurrentOnly is set to true\n     * Else is set to false\n     */\n\n    const drawRallyObjectsOnCanvas = (showCurrentOnly) => {\n        if (arrayOfRallies.current.rallies.length === 0) {\n            return;\n        }\n        if (showCurrentOnly) {\n            for (\n                let i = 0;\n                i <\n                arrayOfRallies.current.rallies[\n                    arrayOfRallies.current.currentActiveIndex\n                ].objectHistory.length;\n                i++\n            ) {\n                canvas.add(\n                    arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].objectHistory[i]\n                );\n            }\n        } else {\n            for (let i = 0; i < arrayOfRallies.current.rallies.length; i++) {\n                for (\n                    let j = 0;\n                    j < arrayOfRallies.current.rallies[i].objectHistory.length;\n                    j++\n                ) {\n                    canvas.add(arrayOfRallies.current.rallies[i].objectHistory[j]);\n                }\n            }\n        }\n    };\n\n    /**\n     * Creates Rally where user can select any point on court\n     * after which he has to select a point on Vertically opposite side\n     * of current point if Canvas was divided into 2 vertical zones\n     * @updates {arrayOfRallies}\n     * @returns None\n     */\n\n    const constructRally = () => {\n        clearAllRallyObjects();\n        clearAllFootworkObjects()\n        if (showAllRallies.current) {\n            drawRallyObjectsOnCanvas(false);\n        } else {\n            drawRallyObjectsOnCanvas(true);\n        }\n        clearMouseListeners();\n        setMode(\"Rally\");\n        canvas.on(\"mouse:down\", (event) => {\n            // console.log(arrayOfRallies.current)\n            if (arrayOfRallies.current.rallies.length === 0) {\n                window.alert('No Rallies Created, press the \"+\" button to add rallies');\n                return;\n            }\n            let currentX = canvas.getPointer(event.e).x;\n            let currentY = canvas.getPointer(event.e).y;\n\n            // console.log(arrayOfRallies.current.currentActiveIndex)\n\n            // If array is empty, then do not check where Point has been placed\n            // console.log(\"This matters\", arrayOfRallies.current.currentActiveIndex)\n\n            if (\n                arrayOfRallies.current.rallies[\n                    arrayOfRallies.current.currentActiveIndex\n                ].shots.length === 0\n            ) {\n                arrayOfRallies.current.rallies[\n                    arrayOfRallies.current.currentActiveIndex\n                ].shots.push({\n                    x: currentX,\n                    y: currentY,\n                });\n\n                // Set lastY value\n                arrayOfRallies.current.rallies[\n                    arrayOfRallies.current.currentActiveIndex\n                ].lastY = checkHalfVertical(currentY);\n\n                let circle = new fabric.Circle({\n                    radius: 6,\n                    left: currentX - 3,\n                    top: currentY - 3,\n                    fill: arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].color,\n                    selectable: false,\n                    stroke: arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].color,\n                    strokeWidth: 1,\n                });\n\n                let p = new fabric.IText(\n                    arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].shots.length + \"\",\n                    {\n                        fontFamily: \"Quicksand\",\n                        stroke: arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].color,\n                        left: currentX + 12,\n                        top: currentY,\n                        fontSize: 20,\n                        editable: false,\n                        selectable: false,\n                    }\n                );\n\n                let group = new fabric.Group([p, circle], {\n                    selectable: false\n                })\n\n                canvas.add(group);\n\n                arrayOfRallies.current.rallies[\n                    arrayOfRallies.current.currentActiveIndex\n                ].objectHistory.push(group);\n\n            }\n\n            // Otherwise check in which half last Point was recorded\n            else if (\n                arrayOfRallies.current.rallies[\n                    arrayOfRallies.current.currentActiveIndex\n                ].shots.length > 0\n            ) {\n                let currPointLocY = checkHalfVertical(currentY);\n                // console.log(\"current \", currPointLocY)\n                // console.log(\"Compare \", curshotArray.lengthrPointLocY, rallyLastY)\n\n                if (\n                    currPointLocY ===\n                    arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].lastY\n                ) {\n                    // Do nothing, as selected point\n                    // is not on opposite vertical half\n                    // Invalid Point Selected\n                } else {\n                    arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].shots.push({\n                        x: currentX,\n                        y: currentY,\n                    });\n\n                    // Set rallyLastY value\n                    arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].lastY = checkHalfVertical(currentY);\n\n                    let circle = new fabric.Circle({\n                        radius: 6,\n                        left: currentX - 3,\n                        top: currentY - 3,\n                        fill: arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].color,\n                        selectable: false,\n                        stroke: arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].color,\n                        strokeWidth: 1,\n                    });\n\n                    let p = new fabric.IText(\n                        arrayOfRallies.current.rallies[\n                            arrayOfRallies.current.currentActiveIndex\n                        ].shots.length + \"\",\n                        {\n                            fontFamily: \"Quicksand\",\n                            stroke: arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].color,\n                            left: currentX + 12,\n                            top: currentY,\n                            fontSize: 20,\n                            editable: false,\n                            selectable: false,\n                        }\n                    );\n\n                    let line = new fabric.Line(\n                        [\n                            arrayOfRallies.current.rallies[\n                                arrayOfRallies.current.currentActiveIndex\n                            ].shots[\n                                arrayOfRallies.current.rallies[\n                                    arrayOfRallies.current.currentActiveIndex\n                                ].shots.length - 1\n                            ].x,\n                            arrayOfRallies.current.rallies[\n                                arrayOfRallies.current.currentActiveIndex\n                            ].shots[\n                                arrayOfRallies.current.rallies[\n                                    arrayOfRallies.current.currentActiveIndex\n                                ].shots.length - 1\n                            ].y,\n                            arrayOfRallies.current.rallies[\n                                arrayOfRallies.current.currentActiveIndex\n                            ].shots[\n                                arrayOfRallies.current.rallies[\n                                    arrayOfRallies.current.currentActiveIndex\n                                ].shots.length - 2\n                            ].x,\n                            arrayOfRallies.current.rallies[\n                                arrayOfRallies.current.currentActiveIndex\n                            ].shots[\n                                arrayOfRallies.current.rallies[\n                                    arrayOfRallies.current.currentActiveIndex\n                                ].shots.length - 2\n                            ].y,\n                        ],\n                        {\n                            stroke: arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].color,\n                            strokeWidth: 2,\n                            selectable: false,\n                        }\n                    );\n\n                    let group = new fabric.Group([p, line, circle], {\n                        selectable: false\n                    })\n                    // group.add(p)\n                    // group.add(line)\n                    // group.add(circle)\n\n                    canvas.add(group);\n\n                    arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].objectHistory.push(group);\n                }\n            }\n        });\n    };\n\n    /**\n     * Remove 1 element from Current Rally Object\n     * @updates arrayOfRallies\n     * @returns None\n     */\n\n    const undoLastArraySimulation = () => {\n        if (arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].shots.length === 0 ||\n            isNaN(arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].shots.length)) {\n\n            window.alert(\"No item to undo\", arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].shots.length)\n        }\n        else {\n            canvas.remove(arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].objectHistory[\n                arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].objectHistory.length - 1])\n\n            arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].objectHistory.pop()\n            arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].shots.pop()\n\n            if (arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].shots.length > 0) {\n                arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].lastY = checkHalfVertical(\n                    arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].shots[\n                        arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].shots.length - 1\n                    ].y\n                )\n            }\n        }\n    }\n\n    /**\n     * Remove all objects from all other rallies\n     * Keep only plotted points of current active index\n     * @updates None\n     * @return None\n     */\n\n    const clearAllFootworkObjects = () => {\n        for (let i = 0; i < arrayOfFootwork.current.footworks.length; i++) {\n            for (\n                let j = 0;\n                j < arrayOfFootwork.current.footworks[i].objectHistory.length;\n                j++\n            ) {\n                canvas.remove(arrayOfFootwork.current.footworks[i].objectHistory[j]);\n            }\n        }\n    };\n\n    /**\n     * Draw Footwork Objects on screen as per demand\n     * If only current one is to be displayed\n     * @param showCurrentOnly is set to true\n     * Else is set to false\n     */\n\n    const drawFootworkObjectsOnCanvas = (showCurrentOnly) => {\n        if (arrayOfFootwork.current.footworks.length === 0) {\n            return;\n        }\n        if (showCurrentOnly) {\n            for (\n                let i = 0;\n                i <\n                arrayOfFootwork.current.footworks[\n                    arrayOfFootwork.current.currentActiveIndex\n                ].objectHistory.length;\n                i++\n            ) {\n                canvas.add(\n                    arrayOfFootwork.current.footworks[\n                        arrayOfFootwork.current.currentActiveIndex\n                    ].objectHistory[i]\n                );\n            }\n        } else {\n            for (let i = 0; i < arrayOfFootwork.current.footworks.length; i++) {\n                for (\n                    let j = 0;\n                    j < arrayOfFootwork.current.footworks[i].objectHistory.length;\n                    j++\n                ) {\n                    canvas.add(arrayOfFootwork.current.footworks[i].objectHistory[j]);\n                }\n            }\n        }\n    };\n\n    /**\n     * Creates Footwork Movements, like a Rally\n     * This is available only on 1 side of court, wherever the point is first activated\n     * @param\n     * @returns none\n     * @updates {mode}\n     */\n\n    const constructFootwork = () => {\n        clearAllFootworkObjects();\n        clearAllRallyObjects()\n        if (showAllFootworks.current) {\n            drawFootworkObjectsOnCanvas(false);\n        } else {\n            drawFootworkObjectsOnCanvas(true);\n        }\n        clearMouseListeners();\n        setMode(\"Footwork\");\n        canvas.on(\"mouse:down\", (event) => {\n            // console.log(arrayOfRallies)\n            if (arrayOfFootwork.current.footworks.length === 0) {\n                window.alert(\n                    'No Footworks Created, press the \"+\" button to add footworks'\n                );\n                return;\n            }\n            let currentX = canvas.getPointer(event.e).x;\n            let currentY = canvas.getPointer(event.e).y;\n\n            // If array is empty, then do not check where Point has been placed\n            if (\n                arrayOfFootwork.current.footworks[\n                    arrayOfFootwork.current.currentActiveIndex\n                ].movements.length === 0\n            ) {\n                arrayOfFootwork.current.footworks[\n                    arrayOfFootwork.current.currentActiveIndex\n                ].movements.push({\n                    x: currentX,\n                    y: currentY,\n                });\n\n                // Set lastY value\n                arrayOfFootwork.current.footworks[\n                    arrayOfFootwork.current.currentActiveIndex\n                ].lastY = checkHalfVertical(currentY);\n\n                let rect = new fabric.Rect({\n                    height: 10,\n                    width: 10,\n                    left: currentX - 3,\n                    top: currentY - 3,\n                    fill: arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].color,\n                    selectable: false,\n                    stroke: arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].color,\n                    strokeWidth: 1,\n                });\n\n                let p = new fabric.IText(\n                    arrayOfFootwork.current.footworks[\n                        arrayOfFootwork.current.currentActiveIndex\n                    ].movements.length + \"\",\n                    {\n                        fontFamily: \"Quicksand\",\n                        stroke: arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].color,\n                        left: currentX + 12,\n                        top: currentY,\n                        fontSize: 20,\n                        editable: false,\n                        selectable: false,\n                    }\n                );\n\n                let group = new fabric.Group([p, rect], {\n                    selectable: false\n                })\n\n                canvas.add(group);\n\n                arrayOfFootwork.current.footworks[\n                    arrayOfFootwork.current.currentActiveIndex\n                ].objectHistory.push(group);\n            }\n\n            // Otherwise check in which half last Point was recorded\n            else if (\n                arrayOfFootwork.current.footworks[\n                    arrayOfFootwork.current.currentActiveIndex\n                ].movements.length > 0\n            ) {\n                let currPointLocY = checkHalfVertical(currentY);\n                // console.log(\"current \", currPointLocY)\n                // console.log(\"Compare \", curshotArray.lengthrPointLocY, rallyLastY)\n\n                if (\n                    !(\n                        currPointLocY ===\n                        arrayOfFootwork.current.footworks[\n                            arrayOfFootwork.current.currentActiveIndex\n                        ].lastY\n                    )\n                ) {\n                    // Do nothing, as selected point\n                    // is on opposite vertical half\n                    // Invalid Point Selected\n                } else {\n                    arrayOfFootwork.current.footworks[\n                        arrayOfFootwork.current.currentActiveIndex\n                    ].movements.push({\n                        x: currentX,\n                        y: currentY,\n                    });\n\n                    let rect = new fabric.Rect({\n                        height: 10,\n                        width: 10,\n                        left: currentX - 3,\n                        top: currentY - 3,\n                        fill: arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].color,\n                        selectable: false,\n                        stroke: arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].color,\n                        strokeWidth: 1,\n                    });\n\n                    let p = new fabric.IText(\n                        arrayOfFootwork.current.footworks[\n                            arrayOfFootwork.current.currentActiveIndex\n                        ].movements.length + \"\",\n                        {\n                            fontFamily: \"Quicksand\",\n                            stroke: arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].color,\n                            left: currentX + 12,\n                            top: currentY,\n                            fontSize: 20,\n                            editable: false,\n                            selectable: false,\n                        }\n                    );\n\n                    let line = new fabric.Line(\n                        [\n                            arrayOfFootwork.current.footworks[\n                                arrayOfFootwork.current.currentActiveIndex\n                            ].movements[\n                                arrayOfFootwork.current.footworks[\n                                    arrayOfFootwork.current.currentActiveIndex\n                                ].movements.length - 1\n                            ].x,\n                            arrayOfFootwork.current.footworks[\n                                arrayOfFootwork.current.currentActiveIndex\n                            ].movements[\n                                arrayOfFootwork.current.footworks[\n                                    arrayOfFootwork.current.currentActiveIndex\n                                ].movements.length - 1\n                            ].y,\n                            arrayOfFootwork.current.footworks[\n                                arrayOfFootwork.current.currentActiveIndex\n                            ].movements[\n                                arrayOfFootwork.current.footworks[\n                                    arrayOfFootwork.current.currentActiveIndex\n                                ].movements.length - 2\n                            ].x,\n                            arrayOfFootwork.current.footworks[\n                                arrayOfFootwork.current.currentActiveIndex\n                            ].movements[\n                                arrayOfFootwork.current.footworks[\n                                    arrayOfFootwork.current.currentActiveIndex\n                                ].movements.length - 2\n                            ].y,\n                        ],\n                        {\n                            stroke: arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].color,\n                            strokeWidth: 2,\n                            selectable: false,\n                        }\n                    );\n\n                    let group = new fabric.Group([p, line, rect], {\n                        selectable: false\n                    })\n\n                    canvas.add(group);\n\n                    arrayOfFootwork.current.footworks[\n                        arrayOfFootwork.current.currentActiveIndex\n                    ].objectHistory.push(group);\n\n                }\n            }\n        });\n    };\n\n    /**\n     * Remove 1 element from Current Rally Object\n     * @updates arrayOfRallies\n     * @returns None\n     */\n\n    const undoLastFootworkSimulation = () => {\n        if (arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].movements.length === 0 ||\n            isNaN(arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].movements.length)) {\n            window.alert(\"No item to undo\")\n        }\n        else {\n            canvas.remove(arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].objectHistory[\n                arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].objectHistory.length - 1])\n\n            arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].objectHistory.pop()\n            arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].movements.pop()\n\n            if (arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].movements.length > 0) {\n                arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].lastY = checkHalfVertical(\n                    arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].movements[\n                        arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].movements.length - 1\n                    ].y\n                )\n            }\n        }\n    }\n\n    /** Create a new rally in the state variable arrayOfRallies\n     * @updates {currentActiveIndex, arrayOfRallies}\n     * @returns none\n     * @problems previous state is reflected and does not ppend the current user inputed rally.\n     * Cannot find `shots` attribute in the newly created rally @resolved\n     */\n\n    function addRally() {\n        let x = arrayOfRallies.current.rallies.length;\n        if (x === undefined) {\n            x = 0;\n        }\n\n        arrayOfRallies.current.rallies.push({\n            name: rallyOrFootworkName.current.value,\n            shots: [],\n            lastY: -1,\n            color: randomColor({ luminosity: 'dark', }),\n            objectHistory: [],\n            lastActiveAnimation: -1,\n            lastActiveAnimationRef: null,\n        });\n\n        arrayOfRallies.current.currentActiveIndex = x;\n        forceUpdate();\n        constructRally();\n    }\n\n    /**\n     * Create a new footwork in the state variable arrayOfFootwork.currents\n     * @updates {currentActiveIndexFootwork, numFootworks, arrayOfFootwork.currents}\n     * @returns none\n     * @problems previous state is reflected and does not ppend the current user inputed footwork. Cannot find `movements` attribute in the newly created footwork\n     */\n    function addFootwork() {\n        let x = arrayOfFootwork.current.footworks.length;\n        if (x === undefined) {\n            x = 0;\n        }\n\n        arrayOfFootwork.current.footworks.push({\n            name: rallyOrFootworkName.current.value,\n            movements: [],\n            lastY: -1,\n            color: randomColor({ luminosity: 'dark', }),\n            objectHistory: [],\n            lastActiveAnimation: -1,\n            lastActiveAnimationRef: null,\n        });\n        arrayOfFootwork.current.currentActiveIndex = x;\n        forceUpdate();\n        constructFootwork();\n    }\n\n    /**\n     * Create a function that draws a line from 2 points of a generated rally\n     * After drawing a rally, it waits for 1 second\n     * Then it returns\n     * @returns None\n     */\n\n    const drawOneRallyLine = (img) => {\n        let lastActiveAnimation =\n            arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex]\n                .lastActiveAnimation;\n        if (lastActiveAnimation === -1) {\n            lastActiveAnimation = 0;\n        } else if (\n            lastActiveAnimation ===\n            arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex]\n                .shots.length -\n            1\n        ) {\n            lastActiveAnimation = 0;\n            return;\n\n        }\n\n        if (runFlag.current) {\n            let angle =\n                (Math.atan2(\n                    arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].shots[lastActiveAnimation].y -\n                    arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].shots[lastActiveAnimation + 1].y,\n                    arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].shots[lastActiveAnimation].x -\n                    arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].shots[lastActiveAnimation + 1].x\n                ) *\n                    180) /\n                Math.PI +\n                90;\n\n            let YVal = checkHalfVertical(arrayOfRallies.current.rallies[\n                arrayOfRallies.current.currentActiveIndex\n            ].shots[lastActiveAnimation].y)\n\n            if (YVal === 1) {\n                img.set({\n                    left: arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].shots[lastActiveAnimation].x - 20,\n                    top: arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].shots[lastActiveAnimation].y - 20,\n                    angle: angle,\n                });\n                img.animate(\n                    {\n                        left: arrayOfRallies.current.rallies[\n                            arrayOfRallies.current.currentActiveIndex\n                        ].shots[lastActiveAnimation + 1].x - 20,\n                        top: arrayOfRallies.current.rallies[\n                            arrayOfRallies.current.currentActiveIndex\n                        ].shots[lastActiveAnimation + 1].y - 20,\n                    },\n                    {\n                        duration: 4000,\n                        onChange: canvas.renderAll.bind(canvas),\n                        onComplete: () => {\n                            console.log(\n                                lastActiveAnimation,\n                                \" : \",\n                                arrayOfRallies.current.rallies[\n                                    arrayOfRallies.current.currentActiveIndex\n                                ].shots.length - 2\n                            );\n                            if (\n                                lastActiveAnimation ===\n                                arrayOfRallies.current.rallies[\n                                    arrayOfRallies.current.currentActiveIndex\n                                ].shots.length -\n                                2\n                            ) {\n                                shuttleAnimationObject.current = null;\n                                canvas.remove(img);\n                                runFlag.current = false\n                                forceUpdate()\n                            }\n                        },\n                    }\n                );\n            }\n\n            else {\n                img.set({\n                    left: arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].shots[lastActiveAnimation].x + 20,\n                    top: arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].shots[lastActiveAnimation].y + 20,\n                    angle: angle,\n                });\n                img.animate(\n                    {\n                        left: arrayOfRallies.current.rallies[\n                            arrayOfRallies.current.currentActiveIndex\n                        ].shots[lastActiveAnimation + 1].x + 20,\n                        top: arrayOfRallies.current.rallies[\n                            arrayOfRallies.current.currentActiveIndex\n                        ].shots[lastActiveAnimation + 1].y + 20,\n                    },\n                    {\n                        duration: 4000,\n                        onChange: canvas.renderAll.bind(canvas),\n                        onComplete: () => {\n                            console.log(\n                                lastActiveAnimation,\n                                \" : \",\n                                arrayOfRallies.current.rallies[\n                                    arrayOfRallies.current.currentActiveIndex\n                                ].shots.length - 2\n                            );\n                            if (\n                                lastActiveAnimation ===\n                                arrayOfRallies.current.rallies[\n                                    arrayOfRallies.current.currentActiveIndex\n                                ].shots.length -\n                                2\n                            ) {\n                                shuttleAnimationObject.current = null;\n                                canvas.remove(img);\n                                runFlag.current = false\n                                forceUpdate()\n                            }\n                        },\n                    }\n                );\n            }\n\n            arrayOfRallies.current.rallies[\n                arrayOfRallies.current.currentActiveIndex\n            ].lastActiveAnimation = lastActiveAnimation + 1;\n        }\n    };\n\n    /**\n     * @repeat drawOneRallyLine() for current array\n     * @returns None\n     */\n\n    const runCurrentShuttleAnimation = () => {\n        if (arrayOfRallies.current.rallies[\n            arrayOfRallies.current.currentActiveIndex\n        ].shots === undefined) {\n            window.alert(\"Please add rally positions to run simulation\");\n            return\n        }\n        if (\n            isNaN(\n                arrayOfRallies.current.rallies[\n                    arrayOfRallies.current.currentActiveIndex\n                ].shots.length\n            ) ||\n            arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex]\n                .shots.length <= 0\n        ) {\n            window.alert(\"Please add rally positions to run simulation\");\n            console.log(\n                arrayOfRallies.current.rallies[\n                arrayOfRallies.current.currentActiveIndex\n                ],\n                arrayOfRallies.current.currentActiveIndex\n            );\n            return;\n        } else if (\n            arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex]\n                .shots.length === 1\n        ) {\n            window.alert(\n                \"Only 1 shot has been added, please add more than 1\"\n            );\n            return;\n        }\n\n        new fabric.Image.fromURL(Shuttle, (img) => {\n            if (shuttleAnimationObject.current === null) {\n                shuttleAnimationObject.current = img;\n                canvas.add(shuttleAnimationObject.current);\n                shuttleAnimationObject.current.scaleToWidth(40);\n            }\n\n            if (\n                arrayOfRallies.current.rallies[\n                    arrayOfRallies.current.currentActiveIndex\n                ].lastActiveAnimation ===\n                arrayOfRallies.current.rallies[\n                    arrayOfRallies.current.currentActiveIndex\n                ].shots.length -\n                1\n            ) {\n                arrayOfRallies.current.rallies[\n                    arrayOfRallies.current.currentActiveIndex\n                ].lastActiveAnimation = 0;\n            }\n\n            if (runFlag.current === false) {\n                runFlag.current = true\n            }\n\n            for (\n                let i =\n                    arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].lastActiveAnimation,\n                waitFlag = 0;\n                i <\n                arrayOfRallies.current.rallies[\n                    arrayOfRallies.current.currentActiveIndex\n                ].shots.length -\n                1;\n                i++\n            ) {\n                forceUpdate()\n                if (i === -1) {\n                    continue;\n                }\n                console.log(i);\n                setTimeout(() => {\n                    drawOneRallyLine(shuttleAnimationObject.current);\n                }, waitFlag * 4000);\n                waitFlag++;\n            }\n        });\n    };\n\n    /**\n     * Create a function that draws a line from 2 points of a generated footwork\n     * After drawing a footwork movement, it returns call to\n     * @function runCurrentFootworkAnimation\n     * @returns None\n     */\n\n    const drawOneFootworkLine = (img) => {\n        let lastActiveAnimation =\n            arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex]\n                .lastActiveAnimation;\n        if (lastActiveAnimation === -1) {\n            lastActiveAnimation = 0;\n        } else if (\n            lastActiveAnimation ===\n            arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex]\n                .movements.length -\n            1\n        ) {\n            lastActiveAnimation = 0;\n            return;\n\n        }\n\n        if (runFlag.current) {\n            let angle\n            if (checkHalfVertical(arrayOfFootwork.current.footworks[\n                arrayOfFootwork.current.currentActiveIndex\n            ].movements[lastActiveAnimation].y) === 1) {\n                angle = 180\n            } else {\n                angle = 0\n            }\n\n            let YVal = checkHalfVertical(arrayOfFootwork.current.footworks[\n                arrayOfFootwork.current.currentActiveIndex\n            ].movements[lastActiveAnimation].y)\n\n            if (YVal === 1) {\n                img.set({\n                    left: arrayOfFootwork.current.footworks[\n                        arrayOfFootwork.current.currentActiveIndex\n                    ].movements[lastActiveAnimation].x + 30,\n                    top: arrayOfFootwork.current.footworks[\n                        arrayOfFootwork.current.currentActiveIndex\n                    ].movements[lastActiveAnimation].y + 20,\n                    angle: angle,\n                });\n                img.animate(\n                    {\n                        left: arrayOfFootwork.current.footworks[\n                            arrayOfFootwork.current.currentActiveIndex\n                        ].movements[lastActiveAnimation + 1].x + 30,\n                        top: arrayOfFootwork.current.footworks[\n                            arrayOfFootwork.current.currentActiveIndex\n                        ].movements[lastActiveAnimation + 1].y + 20,\n                    },\n                    {\n                        duration: 4000,\n                        onChange: canvas.renderAll.bind(canvas),\n                        onComplete: () => {\n                            console.log(\n                                lastActiveAnimation,\n                                \" : \",\n                                arrayOfFootwork.current.footworks[\n                                    arrayOfFootwork.current.currentActiveIndex\n                                ].movements.length - 2\n                            );\n                            if (\n                                lastActiveAnimation ===\n                                arrayOfFootwork.current.footworks[\n                                    arrayOfFootwork.current.currentActiveIndex\n                                ].movements.length -\n                                2\n                            ) {\n                                rightFootworkAnimationObject.current = null;\n                                canvas.remove(img);\n                                runFlag.current = false\n                                forceUpdate()\n                            }\n                        },\n                    }\n                );\n            }\n\n            else {\n                img.set({\n                    left: arrayOfFootwork.current.footworks[\n                        arrayOfFootwork.current.currentActiveIndex\n                    ].movements[lastActiveAnimation].x - 30,\n                    top: arrayOfFootwork.current.footworks[\n                        arrayOfFootwork.current.currentActiveIndex\n                    ].movements[lastActiveAnimation].y - 20,\n                    angle: angle,\n                });\n                img.animate(\n                    {\n                        left: arrayOfFootwork.current.footworks[\n                            arrayOfFootwork.current.currentActiveIndex\n                        ].movements[lastActiveAnimation + 1].x - 30,\n                        top: arrayOfFootwork.current.footworks[\n                            arrayOfFootwork.current.currentActiveIndex\n                        ].movements[lastActiveAnimation + 1].y - 20,\n                    },\n                    {\n                        duration: 4000,\n                        onChange: canvas.renderAll.bind(canvas),\n                        onComplete: () => {\n                            console.log(\n                                lastActiveAnimation,\n                                \" : \",\n                                arrayOfFootwork.current.footworks[\n                                    arrayOfFootwork.current.currentActiveIndex\n                                ].movements.length - 2\n                            );\n                            if (\n                                lastActiveAnimation ===\n                                arrayOfFootwork.current.footworks[\n                                    arrayOfFootwork.current.currentActiveIndex\n                                ].movements.length -\n                                2\n                            ) {\n                                rightFootworkAnimationObject.current = null;\n                                canvas.remove(img);\n                                runFlag.current = false\n                                forceUpdate()\n                            }\n                        },\n                    }\n                );\n            }\n            arrayOfFootwork.current.footworks[\n                arrayOfFootwork.current.currentActiveIndex\n            ].lastActiveAnimation = lastActiveAnimation + 1;\n        }\n    };\n\n    /**\n     * @repeat drawOneFoorworkLine() for current array\n     * @returns None\n     */\n\n    const runCurrentFootworkAnimation = () => {\n        if (arrayOfFootwork.current.footworks[\n            arrayOfFootwork.current.currentActiveIndex\n        ] === undefined) {\n            window.alert(\"Please add footwork positions to run simulation\");\n            return\n        }\n        if (\n            isNaN(\n                arrayOfFootwork.current.footworks[\n                    arrayOfFootwork.current.currentActiveIndex\n                ].movements.length\n            ) ||\n            arrayOfFootwork.current.footworks[\n                arrayOfFootwork.current.currentActiveIndex\n            ].movements.length <= 0\n        ) {\n            window.alert(\"Please add footwork positions to run simulation\");\n            console.log(\n                arrayOfFootwork.current.footworks[\n                arrayOfFootwork.current.currentActiveIndex\n                ],\n                arrayOfFootwork.current.currentActiveIndex\n            );\n            return;\n        } else if (\n            arrayOfFootwork.current.footworks[\n                arrayOfFootwork.current.currentActiveIndex\n            ].movements.length === 1\n        ) {\n            window.alert(\n                \"Only 1 footwork has been added, please add more than 1\"\n            );\n            return;\n        }\n\n        if (runFlag.current === false) {\n            runFlag.current = true\n        }\n\n        new fabric.Image.fromURL(RightBoot, (right) => {\n            new fabric.Image.fromURL(LeftBoot, (left) => {\n                if (rightFootworkAnimationObject.current === null || leftFootworkAnimationObject.current === null) {\n                    rightFootworkAnimationObject.current = right;\n                    leftFootworkAnimationObject.current = left;\n                    rightFootworkAnimationObject.current.set({\n                        right: 30, selectable: true\n                    })\n                    rightFootworkAnimationObject.current.scaleToWidth(40)\n                    leftFootworkAnimationObject.current.set({\n                        left: -30, selectable: true\n                    })\n                    rightFootworkAnimationObject.current.scaleToWidth(40)\n                    leftFootworkAnimationObject.current.scaleToWidth(40)\n\n                    footworkAnimationObject.current = new fabric.Group([left, right])\n\n                    footworkAnimationObject.current.add(rightFootworkAnimationObject.current);\n                    footworkAnimationObject.current.add(leftFootworkAnimationObject.current);\n                    // footworkAnimationObject.current.scaleToWidth(40)\n                    canvas.add(footworkAnimationObject.current)\n                }\n\n                if (\n                    arrayOfFootwork.current.footworks[\n                        arrayOfFootwork.current.currentActiveIndex\n                    ].lastActiveAnimation ===\n                    arrayOfFootwork.current.footworks[\n                        arrayOfFootwork.current.currentActiveIndex\n                    ].movements.length -\n                    1\n                ) {\n                    arrayOfFootwork.current.footworks[\n                        arrayOfFootwork.current.currentActiveIndex\n                    ].lastActiveAnimation = 0;\n                }\n\n                for (\n                    let i =\n                        arrayOfFootwork.current.footworks[\n                            arrayOfFootwork.current.currentActiveIndex\n                        ].lastActiveAnimation,\n                    waitFlag = 0;\n                    i <\n                    arrayOfFootwork.current.footworks[\n                        arrayOfFootwork.current.currentActiveIndex\n                    ].movements.length -\n                    1;\n                    i++\n                ) {\n                    forceUpdate()\n                    if (i === -1) {\n                        continue;\n                    }\n                    console.log(waitFlag);\n                    setTimeout(() => {\n                        drawOneFootworkLine(footworkAnimationObject.current);\n                    }, waitFlag * 4000);\n                    waitFlag++;\n                }\n            });\n        })\n    };\n\n    /**\n     * Displays the current number of rallies or footworks placed on the canvas by the user\n     * @returns the chakra.div for displaying the rallies and footworks\n     * @function {addRally, addFunction}\n     */\n\n    const setSimulationMenu = () => {\n        let ralliesOrFootwork = null;\n        let l = null;\n        if (mode === \"Rally\") {\n            l = arrayOfRallies.current.rallies;\n            if (l === undefined) {\n                l = [];\n            }\n            ralliesOrFootwork = \"Rallies\";\n        } else if (mode === \"Footwork\") {\n            l = arrayOfFootwork.current.footworks;\n            if (l === undefined) {\n                l = [];\n            }\n            ralliesOrFootwork = \"Footworks\";\n        } else {\n            l = [];\n            ralliesOrFootwork = \"Select Simulation\";\n        }\n        console.log(\"Currently Rendering : \", l, arrayOfFootwork.current.currentActiveIndex);\n        return (\n            <chakra.div w={\"100%\"} m={1} overflow='auto'>\n                <Center w=\"100%\">\n                    <VStack w=\"100%\">\n                        <Text fontSize={\"2xl\"}>{ralliesOrFootwork}</Text>\n                        <Flex as=\"p\" fontSize={\"2xl\"} mb={\"1vh\"}>\n                            {mode === \"Rally\" ? (\n                                <Checkbox\n                                    isChecked={showAllRallies.current}\n                                    onChange={(e) => {\n                                        showAllRallies.current = e.target.checked;\n                                        forceUpdate();\n                                        constructRally();\n                                    }}\n                                >\n                                    Show All\n                                </Checkbox>\n                            ) : null}\n                        </Flex>\n                        <Flex as=\"p\" fontSize={\"2xl\"} mb={\"1vh\"}>\n                            {mode === \"Footwork\" ? (\n                                <Checkbox\n                                    isChecked={showAllFootworks.current}\n                                    onChange={(e) => {\n                                        showAllFootworks.current = e.target.checked;\n                                        forceUpdate();\n                                        console.log(\"Called Footwork Now\");\n                                        constructFootwork();\n                                    }}\n                                >\n                                    Show All\n                                </Checkbox>\n                            ) : null}\n                        </Flex>\n                    </VStack>\n                </Center>\n\n                <chakra.div overflowY=\"auto\">\n                    <OrderedList justifyContent=\"center\" alignItems=\"left\" spacing=\"1\">\n                        {l.map((i, index) => (\n                            <ListItem key={index}>\n                                <Grid templateColumns=\"repeat(4, 1fr)\" gap={1}>\n                                    <GridItem colSpan={3}>\n                                        <Input\n                                            aria-colspan={8}\n                                            w={\"100%\"}\n                                            onClick={() => {\n                                                if (mode === \"Rally\") {\n                                                    arrayOfRallies.current.currentActiveIndex = index;\n                                                    clearMouseListeners();\n                                                    constructRally();\n                                                } else if (mode === \"Footwork\") {\n                                                    arrayOfFootwork.current.currentActiveIndex = index;\n                                                    clearMouseListeners();\n                                                    constructFootwork();\n                                                }\n                                            }}\n                                            value={i.name}\n                                            _hover={() => { }}\n                                            border={\"solid\"}\n                                            fill={i.color}\n                                            focusBorderColor={i.color}\n                                            borderColor={i.color}\n                                            defaultValue={i.name}\n                                            onChange={(e) => {\n                                                if (e.target.value === \"\") {\n                                                    e.target.placeholder = \"Enter some value\";\n                                                    forceUpdate();\n                                                    return;\n                                                }\n                                                if (mode === \"Rally\") {\n                                                    arrayOfRallies.current.rallies[\n                                                        arrayOfRallies.current.currentActiveIndex\n                                                    ].name = e.target.value;\n                                                } else if (mode === \"Footwork\") {\n                                                    arrayOfFootwork.current.footworks[\n                                                        arrayOfFootwork.current.currentActiveIndex\n                                                    ].name = e.target.value;\n                                                }\n                                                forceUpdate();\n                                            }}\n                                        />\n                                    </GridItem>\n                                    <GridItem colSpan={1}>\n                                        <Text\n                                            fontSize={\"3xl\"}\n                                            as=\"button\"\n                                            onClick={() => {\n                                                if (\n                                                    window.confirm(\n                                                        \"Do you really want to delete this item\"\n                                                    )\n                                                ) {\n                                                    if (mode === \"Rally\") {\n\n                                                        // Handle Object History\n                                                        if (showAllRallies.current || arrayOfRallies.current.currentActiveIndex === index) {\n                                                            for (let i = 0; i < arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].objectHistory.length; i++) {\n                                                                canvas.remove(arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].objectHistory[i])\n                                                            }\n                                                        }\n\n                                                        // Handle Current Active Index\n                                                        if (arrayOfRallies.current.rallies.length === 0) {\n                                                            arrayOfRallies.current.currentActiveIndex = -1\n                                                        }\n                                                        else if (index === arrayOfRallies.current.rallies.length - 1) {\n                                                            arrayOfRallies.current.currentActiveIndex = arrayOfRallies.current.rallies.length - 2\n                                                        }\n                                                        else {\n                                                            arrayOfRallies.current.currentActiveIndex = index\n                                                        }\n\n                                                        arrayOfRallies.current.rallies.splice(index, 1);\n                                                        forceUpdate();\n                                                        constructRally()\n                                                        return;\n                                                    }\n                                                    if (mode === \"Footwork\") {\n\n                                                        // Handle Object History\n                                                        if (showAllFootworks.current || arrayOfFootwork.current.currentActiveIndex === index) {\n                                                            for (let i = 0; i < arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].objectHistory.length; i++) {\n                                                                console.log(\"Deleting\")\n                                                                canvas.remove(arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].objectHistory[i])\n                                                            }\n                                                        }\n\n                                                        // Handle Current Active Index\n                                                        if (arrayOfFootwork.current.footworks.length === 0) {\n                                                            arrayOfFootwork.current.currentActiveIndex = -1\n                                                        }\n                                                        else if (index === arrayOfFootwork.current.footworks.length - 1) {\n                                                            arrayOfFootwork.current.currentActiveIndex = arrayOfFootwork.current.footworks.length - 2\n                                                        }\n                                                        else {\n                                                            arrayOfFootwork.current.currentActiveIndex = index\n                                                        }\n\n                                                        console.log(showAllFootworks.current, arrayOfFootwork.current.currentActiveIndex)\n                                                        arrayOfFootwork.current.footworks.splice(index, 1);\n                                                        forceUpdate();\n                                                        constructFootwork()\n                                                        return;\n                                                    }\n                                                }\n                                            }}\n                                        >\n                                            <MdDelete />\n                                        </Text>\n                                    </GridItem>\n                                </Grid>\n                            </ListItem>\n                        ))}\n                    </OrderedList>\n                </chakra.div>\n            </chakra.div>\n        );\n    };\n\n\n    /**\n     * Simulation Menu for Mobile Devices\n     * Does everything the same setSimulationMenu() does but with tweaks for mobile devices\n     * Displays the current number of rallies or footworks placed on the canvas by the user\n     * @returns the chakra.div for displaying the rallies and footworks\n     * @function {addRally, addFunction}\n     */\n\n    const setSimulationMenuForMobile = () => {\n        let ralliesOrFootwork = null;\n        let l = null;\n        if (mode === \"Rally\") {\n            l = arrayOfRallies.current.rallies;\n            if (l === undefined) {\n                l = [];\n            }\n            ralliesOrFootwork = \"Rallies\";\n        } else if (mode === \"Footwork\") {\n            l = arrayOfFootwork.current.footworks;\n            if (l === undefined) {\n                l = [];\n            }\n            ralliesOrFootwork = \"Footworks\";\n        } else {\n            l = [];\n            ralliesOrFootwork = \"Select Simulation\";\n        }\n        console.log(\"Currently Rendering : \", l, arrayOfFootwork.current.currentActiveIndex);\n        return (\n            <chakra.div w={\"100%\"} overflow='auto'>\n                <Center w=\"100%\">\n                    <VStack w=\"100%\">\n                        <Text fontSize={\"2xl\"}>{ralliesOrFootwork}</Text>\n                        <Flex as=\"p\" fontSize={\"2xl\"} mb={\"1vh\"}>\n                            {mode === \"Rally\" ? (\n                                <Checkbox\n                                    isChecked={showAllRallies.current}\n                                    onChange={(e) => {\n                                        showAllRallies.current = e.target.checked;\n                                        forceUpdate();\n                                        constructRally();\n                                    }}\n                                >\n                                    Show All\n                                </Checkbox>\n                            ) : null}\n                        </Flex>\n                        <Flex as=\"p\" fontSize={\"sm\"}>\n                            {mode === \"Footwork\" ? (\n                                <Checkbox\n                                    isChecked={showAllFootworks.current}\n                                    onChange={(e) => {\n                                        showAllFootworks.current = e.target.checked;\n                                        forceUpdate();\n                                        console.log(\"Called Footwork Now\");\n                                        constructFootwork();\n                                    }}\n                                >\n                                    Show All\n                                </Checkbox>\n                            ) : null}\n                        </Flex>\n                    </VStack>\n                </Center>\n\n                <chakra.div overflowY=\"auto\">\n                    <OrderedList justifyContent=\"center\" alignItems=\"left\" spacing=\"1\">\n                        {l.map((i, index) => (\n                            <ListItem key={index}>\n                                <Grid templateColumns=\"repeat(4, 1fr)\" gap={1}>\n                                    <GridItem colSpan={3}>\n                                        <Input\n                                            aria-colspan={8}\n                                            w={\"100%\"}\n                                            onClick={() => {\n                                                if (mode === \"Rally\") {\n                                                    arrayOfRallies.current.currentActiveIndex = index;\n                                                    clearMouseListeners();\n                                                    constructRally();\n                                                } else if (mode === \"Footwork\") {\n                                                    arrayOfFootwork.current.currentActiveIndex = index;\n                                                    clearMouseListeners();\n                                                    constructFootwork();\n                                                }\n                                            }}\n                                            value={i.name}\n                                            _hover={() => { }}\n                                            border={\"solid\"}\n                                            fill={i.color}\n                                            focusBorderColor={i.color}\n                                            borderColor={i.color}\n                                            defaultValue={i.name}\n                                            onChange={(e) => {\n                                                if (e.target.value === \"\") {\n                                                    e.target.placeholder = \"Enter some value\";\n                                                    forceUpdate();\n                                                    return;\n                                                }\n                                                if (mode === \"Rally\") {\n                                                    arrayOfRallies.current.rallies[\n                                                        arrayOfRallies.current.currentActiveIndex\n                                                    ].name = e.target.value;\n                                                } else if (mode === \"Footwork\") {\n                                                    arrayOfFootwork.current.footworks[\n                                                        arrayOfFootwork.current.currentActiveIndex\n                                                    ].name = e.target.value;\n                                                }\n                                                forceUpdate();\n                                            }}\n                                        />\n                                    </GridItem>\n                                    <GridItem colSpan={1}>\n                                        <Text\n                                            fontSize={\"3xl\"}\n                                            as=\"button\"\n                                            onClick={() => {\n                                                if (\n                                                    window.confirm(\n                                                        \"Do you really want to delete this item\"\n                                                    )\n                                                ) {\n                                                    if (mode === \"Rally\") {\n\n                                                        // Handle Object History\n                                                        if (showAllRallies.current || arrayOfRallies.current.currentActiveIndex === index) {\n                                                            for (let i = 0; i < arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].objectHistory.length; i++) {\n                                                                canvas.remove(arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].objectHistory[i])\n                                                            }\n                                                        }\n\n                                                        // Handle Current Active Index\n                                                        if (arrayOfRallies.current.rallies.length === 0) {\n                                                            arrayOfRallies.current.currentActiveIndex = -1\n                                                        }\n                                                        else if (index === arrayOfRallies.current.rallies.length - 1) {\n                                                            arrayOfRallies.current.currentActiveIndex = arrayOfRallies.current.rallies.length - 2\n                                                        }\n                                                        else {\n                                                            arrayOfRallies.current.currentActiveIndex = index\n                                                        }\n\n                                                        arrayOfRallies.current.rallies.splice(index, 1);\n                                                        forceUpdate();\n                                                        constructRally()\n                                                        return;\n                                                    }\n                                                    if (mode === \"Footwork\") {\n\n                                                        // Handle Object History\n                                                        if (showAllFootworks.current || arrayOfFootwork.current.currentActiveIndex === index) {\n                                                            for (let i = 0; i < arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].objectHistory.length; i++) {\n                                                                console.log(\"Deleting\")\n                                                                canvas.remove(arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].objectHistory[i])\n                                                            }\n                                                        }\n\n                                                        // Handle Current Active Index\n                                                        if (arrayOfFootwork.current.footworks.length === 0) {\n                                                            arrayOfFootwork.current.currentActiveIndex = -1\n                                                        }\n                                                        else if (index === arrayOfFootwork.current.footworks.length - 1) {\n                                                            arrayOfFootwork.current.currentActiveIndex = arrayOfFootwork.current.footworks.length - 2\n                                                        }\n                                                        else {\n                                                            arrayOfFootwork.current.currentActiveIndex = index\n                                                        }\n\n                                                        console.log(showAllFootworks.current, arrayOfFootwork.current.currentActiveIndex)\n                                                        arrayOfFootwork.current.footworks.splice(index, 1);\n                                                        forceUpdate();\n                                                        constructFootwork()\n                                                        return;\n                                                    }\n                                                }\n                                            }}\n                                        >\n                                            <MdDelete />\n                                        </Text>\n                                    </GridItem>\n                                </Grid>\n                            </ListItem>\n                        ))}\n                    </OrderedList>\n                </chakra.div>\n            </chakra.div>\n        );\n    };\n\n\n    /**\n     * Simulation Menu consists of Controls for\n     * Simulation of rallies\n     */\n\n    const simulationRefs = [\n        {\n            name: \"Check\",\n            icon: <GiMagnifyingGlass />,\n            func: findMidOfCanvas,\n        },\n        {\n            name: \"Grids\",\n            icon: <BiGridSmall />,\n            func: showGrids,\n        },\n    ];\n\n    /**\n     * Menu for showing Simulation Modes\n     */\n\n    const simulationOptions = [\n        {\n            name: \"Rally\",\n            icon: <GiShuttlecock />,\n            func: constructRally,\n        },\n        {\n            name: \"Footwork\",\n            icon: <RiFootprintFill />,\n            func: constructFootwork,\n        },\n    ];\n\n    /**\n     * Menu for showing operations that can be done on modes\n     */\n\n    const simulationOperations = [\n        {\n            name: \"New\",\n            icon: <BsPlusCircle />,\n            p: \"Create\",\n            colorScheme: \"blue\",\n            func: () => {\n                if (mode === \"Rally\" || mode === \"Footwork\") {\n                    onNameControlOpen();\n                } else {\n                    window.alert(\"Choose 1 of simulation operations\");\n                }\n            },\n        },\n        {\n            name: \"Run\",\n            icon: <BiPlayCircle />,\n            colorScheme: \"green\",\n            p: \"Run\",\n            func: () => {\n                if (mode === \"Rally\") {\n                    runCurrentShuttleAnimation();\n                } else if (mode === \"Footwork\") {\n                    runCurrentFootworkAnimation();\n                }\n            },\n        },\n        {\n            name: \"Pause\",\n            icon: <BiPauseCircle />,\n            colorScheme: \"yellow\",\n            p: \"Pause\",\n            func: () => {\n                setMode(\"Pointer\")\n                runFlag.current = false\n            },\n        },\n        {\n            name: \"Stop\",\n            icon: <BiStopCircle />,\n            colorScheme: \"red\",\n            p: \"Stop\",\n            func: () => {\n                if (window.confirm(\"Stop Simulation?\")) {\n                    runFlag.current = false\n                    if (mode === \"Rally\") {\n                        arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].lastActiveAnimation = 0\n                    } else if (mode === \"Footwork\") {\n                        arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].lastActiveAnimation = 0\n                    }\n                }\n\n            },\n        },\n        {\n            name: \"Undo\",\n            icon: <BiUndo />,\n            colorScheme: \"cyan\",\n            p: \"Undo\",\n            func: () => {\n                if (mode === \"Rally\") {\n                    undoLastArraySimulation()\n                } else if (mode === \"Footwork\") {\n                    undoLastFootworkSimulation()\n                }\n            },\n        },\n    ];\n\n    /**\n     * Recording Function Definitions\n     */\n\n    const startCanvasRecording = () => {\n        if (canvasRecorder.current !== null) {\n            if (window.confirm(\"Do you want to remove previous recording?\")) {\n                canvasStream.current = document.querySelector('canvas').captureStream(60)\n                canvasrecordingChunks.current = []\n                let options = { mimeType: 'video/webm' }\n                canvasRecorder.current = new MediaRecorder(canvasStream.current, options)\n                canvasRecorder.current.ondataavailable = (event) => {\n                    console.log(\"Data Available\")\n                    if (event.data.size > 0) {\n                        canvasrecordingChunks.current.push(event.data)\n                    }\n                }\n            }\n        } else {\n            canvasStream.current = document.querySelector('canvas').captureStream(60)\n            canvasrecordingChunks.current = []\n            let options = { mimeType: 'video/webm' }\n            canvasRecorder.current = new MediaRecorder(canvasStream.current, options)\n            canvasRecorder.current.ondataavailable = (event) => {\n                console.log(\"Data Available\")\n                if (event.data.size > 0) {\n                    canvasrecordingChunks.current.push(event.data)\n                }\n            }\n        }\n        canvasRecorder.current.start(1000)\n    }\n\n    const pauseOrResumeCanvasRecording = () => {\n        if (canvasRecorder.current === null || canvasRecorder.current.state === \"inactive\") {\n            window.alert(\"Start Recording before pausing!\")\n            return\n        }\n        if (canvasRecorder.current.state === \"paused\") {\n            canvasRecorder.current.resume()\n        } else {\n            canvasRecorder.current.pause()\n        }\n        forceUpdate()\n    }\n\n    const stopCanvasRecording = () => {\n        if (canvasRecorder.current === null) {\n            window.alert(\"Nothing to Pause\")\n        } else {\n            canvasRecorder.current.stop()\n            forceUpdate()\n        }\n    }\n\n    const downloadCanvasRecording = () => {\n        let blob = new Blob(canvasrecordingChunks.current, {\n            type: \"video/mp4\"\n        })\n        download(blob, canvasTitle.current + \".mp4\")\n    }\n\n    /**\n     * Advanced operation modes\n     */\n\n    const recordingOperations = [\n        {\n            name: \"Start Recording\",\n            icon: <BiVideoRecording />,\n            func: startCanvasRecording,\n        },\n        {\n            name: \"Pause Recording\",\n            icon: (canvasRecorder.current === null || canvasRecorder.current.state === \"paused\") ? <BsPlayFill /> : <BsPauseFill />,\n            func: pauseOrResumeCanvasRecording,\n        },\n        {\n            name: \"Stop Recording\",\n            icon: <BsStopFill />,\n            func: stopCanvasRecording,\n        },\n        {\n            name: \"Download Recording\",\n            icon: <BsDownload />,\n            func: downloadCanvasRecording,\n        }\n    ];\n\n    /**\n     * left panel displays properties of selected object and can be dynamicaly changed\n     */\n    const leftPanel = [\n        {\n            name: \"Fill\",\n            prop: \"fill\",\n            type: \"button\"\n        },\n        {\n            name: \"Border\",\n            prop: \"stroke\",\n            type: \"button\"\n        },\n        {\n            name: \"Border Width\",\n            prop: \"strokeWidth\",\n            type: \"number\"\n        },\n    ];\n\n    /**\n     * Handle Property change in Pop over\n     */\n\n    const handleProperties = () => {\n        return (\n            leftPanel.map((obj, index) => {\n                console.log(obj.type === 'button')\n                return (\n                    <Accordion allowToggle defaultIndex={[0]}>\n                        <AccordionItem isDisabled={currentObject === null}>\n                            <AccordionButton>\n                                <Box flex='1' textAlign='left'>\n                                    {obj.name}\n                                </Box>\n                            </AccordionButton>\n                            <AccordionPanel>\n                                <Box>\n                                    {\n                                        obj.type === 'button' ?\n                                            handleButtonProps(obj) : null\n                                    }\n                                    {\n                                        obj.type === 'number' ? handleNumberProps(obj) : null\n                                    }\n                                </Box>\n                            </AccordionPanel>\n                        </AccordionItem>\n                    </Accordion>\n\n                );\n            })\n        )\n    }\n\n    /**\n     * Handle Button based Properties\n     * of Object Properties\n     */\n\n    const handleButtonProps = (obj) => {\n        const list = [\"#68D391\", \"#82cdcd\", \"#eedd82\", \"#82cda8\", \"#82a8cd\", \"#cd8282\", \"orange\", \"yellow\", \"red\", \"teal\", \"blue\", \"cyan\", \"purple\", \"pink\"]\n        return (\n            list.map((item, idx) => (\n                <Button bg={item} value={item} m=\"1\" borderRadius={'100%'} size='sm' onClick={\n                    () => {\n                        if (currentObject !== null) {\n                            let property = obj.prop\n                            currentObject.set(property, item)\n                            currentObject.set({\n                                selectable: true\n                            })\n                            canvas.renderAll()\n                        }\n                    }}> </Button>\n            ))\n        )\n    }\n\n    /**\n     * Handle Number based Properties\n     * of Object Properties\n     */\n\n    const handleNumberProps = (obj) => {\n        let property = obj.prop\n        return (\n            <Slider aria-label=\"slider-ex-1\" min={1} max={10} step={1} isDisabled={currentObject === null} defaultValue={1}\n                onChangeEnd={(val) => {\n                    console.log(val)\n                    currentObject.set(property, val)\n                    canvas.renderAll()\n                }}>\n                <SliderTrack>\n                    <SliderFilledTrack bg='blue.400' />\n                </SliderTrack>\n                <SliderThumb />\n            </Slider>\n        )\n    }\n\n    /**\n     * Mode of Color as per colorModeValue\n     */\n\n    let currentBackgroundColor = useColorModeValue(\"white\", \"gray.800\");\n    let currentLineColor = useColorModeValue(\"gray.800\", \"white.200\");\n\n    return (\n        <chakra.div mt={() => {\n            if (isBrowser) {\n                return \"2vh\"\n            } else if (isMobile || isTablet) {\n                return \"0\"\n            }\n        }} >\n            <Stack direction={[\"column\", \"row\"]}>\n                <Box display={() => {\n                    if (isBrowser) {\n                        return \"block\"\n                    } else {\n                        return \"none\"\n                    }\n                }} overflow='scroll' h={'-moz-max-content'}>\n                    <Box>\n                        <SimpleGrid columns={1} overflowY=\"auto\" overflow=\"hidden\" >\n                            <Popover size='sm' placement='right' colorScheme='cyan' arrowSize={20}>\n                                <PopoverTrigger>\n                                    <Button borderRadius={0}\n                                        variant='ghost'\n                                        fontSize={\"xl\"}\n                                        color={currentLineColor}\n                                        bg={currentBackgroundColor}\n                                        _hover={() => { }}><VscSymbolProperty /></Button>\n                                </PopoverTrigger>\n                                <PopoverContent>\n                                    <PopoverArrow />\n                                    <PopoverCloseButton />\n                                    <PopoverHeader>Object Properties</PopoverHeader>\n                                    <PopoverBody>{handleProperties()}</PopoverBody>\n                                </PopoverContent>\n                            </Popover>\n                            {objectsMenu.map((item, idx) => {\n                                return (\n                                    <Box w={\"100%\"}>\n                                        <Tooltip label={item.name} key={idx}>\n                                            <Button\n                                                variant=\"ghost\"\n                                                borderRadius={0}\n                                                onClick={item.func}\n                                                color={currentLineColor}\n                                                fontSize={\"xl\"}\n                                                bg={\n                                                    mode === item.name\n                                                        ? \"blue.400\"\n                                                        : currentBackgroundColor\n                                                }\n                                                _hover={() => { }}\n                                            >\n                                                {item.icon}\n                                            </Button>\n                                        </Tooltip>\n                                    </Box>\n                                );\n                            })}\n                        </SimpleGrid>\n                    </Box>\n                    <Box>\n                        <SimpleGrid\n                            columns={1}\n                            overflowY=\"auto\"\n                            overflow=\"hidden\"\n                        >\n                            <Popover placement='right' colorScheme='cyan' arrowSize={20}>\n                                <PopoverTrigger>\n                                    <Button borderRadius={0}\n                                        fontSize={\"xl\"}\n                                        w={\"100%\"}\n                                        color={currentLineColor}\n                                        bg={currentBackgroundColor}\n                                        _hover={() => { }}><AiOutlineBgColors /></Button>\n                                </PopoverTrigger>\n                                <PopoverContent>\n                                    <PopoverArrow />\n                                    <PopoverCloseButton />\n                                    <PopoverHeader>Change Court's Background Color</PopoverHeader>\n                                    <PopoverBody>{selectCanvasBackground()}</PopoverBody>\n                                </PopoverContent>\n                            </Popover>\n                        </SimpleGrid>\n                    </Box>\n                    <Box>\n                        <SimpleGrid\n                            columns={1}\n                            overflowY=\"auto\"\n                            overflow=\"hidden\"\n                        >\n                            {canvasControlMenu.map((item, idx) => {\n                                return (\n                                    <Box w={\"100%\"}>\n                                        <Tooltip label={item.name} key={item}>\n                                            <Button\n                                                borderRadius={0}\n                                                onClick={item.func}\n                                                fontSize={\"xl\"}\n                                                w={\"100%\"}\n                                                color={currentLineColor}\n                                                bg={\n                                                    mode === item.name\n                                                        ? \"blue.400\"\n                                                        : currentBackgroundColor\n                                                }\n                                                _hover={() => { }}\n                                            >\n                                                {item.icon}\n                                            </Button>\n                                        </Tooltip>\n                                    </Box>\n                                );\n                            })}\n                        </SimpleGrid>\n                    </Box>\n                </Box>\n\n                <Box display={() => {\n                    if (isBrowser) {\n                        return \"block\"\n                    } else {\n                        return \"none\"\n                    }\n                }}>\n                    <Box display={[\"none\", \"none\", \"flex\"]}>\n                        <SimpleGrid columns={1} overflowY=\"auto\" overflow=\"scroll\">\n                            {simulationRefs.map((item, idx) => {\n                                return (\n                                    <Box w={\"100%\"} >\n                                        <Tooltip label={item.name} key={idx}>\n                                            <Button\n                                                _hover={() => { }}\n                                                variant=\"ghost\"\n                                                borderRadius={0}\n                                                onClick={item.func}\n                                                fontSize={\"xl\"}\n                                                w={\"100%\"}\n                                                color={currentLineColor}\n                                                bg={\n                                                    mode === item.name\n                                                        ? \"blue.400\"\n                                                        : currentBackgroundColor\n                                                }\n                                            >\n                                                {item.icon}\n                                            </Button>\n                                        </Tooltip>\n                                    </Box>\n                                );\n                            })}\n                        </SimpleGrid>\n                    </Box>\n                    <Box display={[\"none\", \"none\", \"flex\"]} alignContent=\"center\">\n                        <SimpleGrid\n                            columns={1}\n                            overflowY=\"auto\"\n                            overflow=\"hidden\"\n                        >\n                            {simulationOptions.map((item, idx) => {\n                                return (\n                                    <Box w={\"100%\"} >\n                                        <Tooltip label={item.name} key={idx}>\n                                            <Button\n                                                _hover={() => { }}\n                                                borderRadius={0}\n                                                onClick={item.func}\n                                                fontSize={\"xl\"}\n                                                w={\"100%\"}\n                                                color={currentLineColor}\n                                                bg={\n                                                    mode === item.name\n                                                        ? \"blue.400\"\n                                                        : currentBackgroundColor\n                                                }\n                                            >\n                                                {item.icon}\n                                            </Button>\n                                        </Tooltip>\n                                    </Box>\n                                );\n                            })}\n                        </SimpleGrid>\n                    </Box>\n                    <Box display={[\"none\", \"none\", \"flex\"]}>\n                        <VStack>\n                            <SimpleGrid columns={1} overflow=\"hidden\">\n                                {simulationOperations.map((item, idx) => {\n                                    return (\n                                        <Box w=\"100%\" display={item.name === \"Undo\" && runFlag.current === true ? \"none\" : \"flex\"}>\n                                            <Tooltip label={item.name} key={idx}>\n                                                <Button\n                                                    _hover={() => { }}\n                                                    variant=\"ghost\"\n                                                    borderRadius={0}\n                                                    onClick={item.func}\n                                                    fontSize={\"xl\"}\n                                                    w={\"100%\"}\n                                                >\n                                                    {item.icon}\n                                                </Button>\n                                            </Tooltip>\n                                        </Box>\n                                    );\n                                })}\n                            </SimpleGrid>\n                            <SimpleGrid\n                                w={\"100%\"}\n                                columns={1}\n                                maxH={\"30vh\"}\n                                overflow=\"hidden\"\n                            >\n                                {recordingOperations.map((item, idx) => {\n                                    return (\n                                        <Box\n                                            w=\"100%\"\n                                        >\n                                            <Tooltip label={item.name} key={idx}>\n                                                <Button\n                                                    bg={() => {\n                                                        if (idx === 0) {\n                                                            if (canvasRecorder.current === null || canvasRecorder.current.state === \"inactive\") {\n                                                                return (colorMode === \"light\") ? \"gray.300\" : \"gray.500\"\n                                                            } else if (canvasRecorder.current.state === \"recording\") {\n                                                                return \"red.400\"\n                                                            } else if (canvasRecorder.current.state === \"paused\") {\n                                                                return \"cyan.400\"\n                                                            } else {\n                                                                return \"green.400\"\n                                                            }\n                                                        } else return null\n                                                    }}\n                                                    _hover={() => { }}\n                                                    variant=\"ghost\"\n                                                    borderRadius={0}\n                                                    onClick={item.func}\n                                                    fontSize={\"xl\"}\n                                                    w={\"100%\"}\n                                                >\n                                                    {item.icon}\n                                                </Button>\n                                            </Tooltip>\n                                        </Box>\n                                    );\n                                })}\n                            </SimpleGrid>\n                        </VStack>\n                    </Box>\n                </Box>\n\n                <Box display={() => {\n                    if (isBrowser) {\n                        return \"flex\"\n                    } else {\n                        return \"none\"\n                    }\n                }} w={[\"0\", \"20vw\"]} m={\"2vw\"}>\n                    <VStack align={\"flex-start\"}>\n                        <Box w={'100%'} >\n                            <chakra.div as='text' fontSize={'2xl'} color={useColorModeValue('red.500', 'red.300')}>\n                                Rack\n                            </chakra.div>\n                            <chakra.div as='text' fontSize={'2xl'} color={useColorModeValue('black', 'white')}>\n                                Tech\n                            </chakra.div>\n                        </Box>\n                        <Box w={'100%'} >\n                            <Text fontSize={'lg'}>\n                                FALA - Whiteboard\n                            </Text>\n                        </Box>\n                        <Box w={'100%'}>\n                            <Input value={canvasTitle.current} onChange={(e) => {\n                                canvasTitle.current = e.target.value\n                                forceUpdate()\n                            }} />\n                        </Box>\n                        <Grid templateColumns=\"repeat(10, 1fr)\" gap={1}>\n                            <GridItem colSpan={4}>\n                                <InputGroup>\n                                    <InputLeftAddon children={\"Rows\"} />\n                                    <Input\n                                        value={gridLines.current.numRows}\n                                        type=\"number\"\n                                        name=\"x\"\n                                        size=\"md\"\n                                        onChange={(e) => {\n                                            gridLines.current.numRows = parseInt(e.target.value)\n                                            forceUpdate()\n                                        }}\n                                    />\n                                </InputGroup>\n                            </GridItem>\n                            <GridItem colSpan={4}>\n                                <InputGroup>\n                                    <InputLeftAddon children={\"Cols\"} />\n                                    <Input\n                                        value={gridLines.current.numColumns}\n                                        type=\"number\"\n                                        name=\"y\"\n                                        size=\"md\"\n                                        onChange={(e) => {\n                                            gridLines.current.numColumns = parseInt(e.target.value)\n                                            forceUpdate()\n                                        }}\n                                    />\n\n                                </InputGroup>\n                            </GridItem>\n                            <GridItem colSpan={2}>\n                                <Tooltip label=\"Set Grid Lines\">\n                                    <Button\n                                        colorScheme=\"blue\"\n                                        w={\"100%\"}\n                                        onClick={showGrids}\n                                    >\n                                        Set\n                                    </Button>\n                                </Tooltip>\n                            </GridItem>\n                        </Grid>\n                        <Box mt={2} w={'100%'}>\n                            {setSimulationMenu()}\n                        </Box>\n                    </VStack>\n                </Box>\n\n                <Box\n                    w={() => {\n                        if (isMobile || isTablet) {\n                            return \"100%\"\n                        } else {\n                            return \"30vw\"\n                        }\n                    }}\n                    minW={\"30vw\"}\n                    h={() => {\n                        if (isMobile || isTablet) {\n                            return \"85vh\"\n                        }\n                        else {\n                            return \"90vh\"\n                        }\n                    }}\n                    ref={boxDiv}\n                >\n                    <canvas id=\"canvas\"></canvas>\n                </Box>\n\n            </Stack>\n\n            <Box display={() => {\n                if (isMobile || isTablet) {\n                    return \"flex\"\n                } else {\n                    return \"none\"\n                }\n            }} bg={useColorModeValue('red.500', 'red.500')}>\n                <SimpleGrid columns={5} w='100%' py={2}>\n                    <Button variant='ghost' onClick={onObjectsDrawerOpen} fontSize={'2xl'}><FaShapes /></Button>\n                    <Button variant='ghost' onClick={onControlsDrawerOpen} fontSize={'2xl'}><RiRemoteControl2Line /></Button>\n                    <Button variant='ghost' onClick={onSimulationControlsDrawerOpen} fontSize={'2xl'}><GiGears /></Button>\n                    <Button variant='ghost' onClick={onSimulationListsDrawerOpen} fontSize={'2xl'}><IoIosListBox /></Button>\n                    <Button variant='ghost' onClick={onPersonizationDrawerOpen} fontSize={'2xl'}><BiCustomize /></Button>\n\n                </SimpleGrid>\n\n                <Drawer isOpen={isObjectsDrawerOpen}\n                    placement='bottom'\n                    onClose={onObjectsDrawerClose}\n                >\n                    <DrawerOverlay />\n                    <DrawerContent>\n                        <DrawerCloseButton />\n                        <DrawerHeader>\n                            Objects\n                        </DrawerHeader>\n                        <DrawerBody>\n                            <Grid templateColumns='repeat(7, 1fr)' w='100%'>\n                                {objectsMenu.map((item, idx) => {\n                                    return (\n                                        <GridItem\n                                            alignContent='start'\n                                            w='100%'\n                                            colSpan={7}\n                                            variant=\"ghost\"\n                                            borderRadius={0}\n                                            onClick={() => {\n                                                onObjectsDrawerClose()\n                                                item.func()\n                                            }}\n                                            color={currentLineColor}\n                                            fontSize={\"xl\"}\n                                            bg={\n                                                mode === item.name\n                                                    ? \"blue.400\"\n                                                    : currentBackgroundColor\n                                            }\n                                            _hover={() => { }}\n                                        >\n                                            <Button variant='ghost' w='100%' justifyContent='flex-start' leftIcon={item.icon}>\n                                                {item.name}\n                                            </Button>\n                                        </GridItem>\n                                    );\n                                })}\n                            </Grid>\n                        </DrawerBody>\n                    </DrawerContent>\n                </Drawer>\n\n                <Drawer isOpen={isControlsDrawerOpen}\n                    placement='bottom'\n                    onClose={onControlsDrawerClose}\n                >\n                    <DrawerOverlay />\n                    <DrawerContent>\n                        <DrawerCloseButton />\n                        <DrawerHeader>\n                            Controls\n                        </DrawerHeader>\n                        <DrawerBody>\n                            <Grid templateColumns='repeat(7, 1fr)' w='100%'>\n                                {canvasControlMenu.map((item, idx) => {\n                                    return (\n                                        <GridItem\n                                            alignContent='start'\n                                            w='100%'\n                                            colSpan={7}\n                                            variant=\"ghost\"\n                                            borderRadius={0}\n                                            onClick={() => {\n                                                onControlsDrawerClose()\n                                                item.func()\n                                            }}\n                                            color={currentLineColor}\n                                            fontSize={\"xl\"}\n                                            bg={\n                                                mode === item.name\n                                                    ? \"blue.400\"\n                                                    : currentBackgroundColor\n                                            }\n                                            _hover={() => { }}\n                                        >\n                                            <Button variant='ghost' w='100%' justifyContent='flex-start' leftIcon={item.icon}>\n                                                {item.name}\n                                            </Button>\n                                        </GridItem>\n                                    );\n                                })}\n                                {recordingOperations.map((item, idx) => {\n                                    return (\n                                        <GridItem\n                                            bg={() => {\n                                                if (idx === 0) {\n                                                    if (canvasRecorder.current === null || canvasRecorder.current.state === \"inactive\") {\n                                                        return (colorMode === \"light\") ? \"gray.300\" : \"gray.500\"\n                                                    } else if (canvasRecorder.current.state === \"recording\") {\n                                                        return \"red.400\"\n                                                    } else if (canvasRecorder.current.state === \"paused\") {\n                                                        return \"cyan.400\"\n                                                    } else {\n                                                        return \"green.400\"\n                                                    }\n                                                } else return (colorMode === \"light\" ? \"white\" : \"gray.800\")\n                                            }}\n                                            alignContent='start'\n                                            w='100%'\n                                            colSpan={7}\n                                            variant=\"ghost\"\n                                            borderRadius={0}\n                                            onClick={() => {\n                                                onControlsDrawerClose()\n                                                item.func()\n                                            }}\n                                            color={currentLineColor}\n                                            fontSize={\"xl\"}\n                                            _hover={() => { }}\n                                        >\n                                            <Button variant='ghost' w='100%' justifyContent='flex-start' leftIcon={item.icon}>\n                                                {item.name}\n                                            </Button>\n                                        </GridItem>\n                                    )\n                                })}\n                            </Grid>\n                        </DrawerBody>\n                    </DrawerContent>\n                </Drawer>\n\n                <Drawer isOpen={isSimulationControlsDrawerOpen}\n                    placement='bottom'\n                    onClose={onSimulationControlsDrawerClose}\n                >\n                    <DrawerOverlay />\n                    <DrawerContent>\n                        <DrawerCloseButton />\n                        <DrawerHeader>\n                            Simulation Controls\n                        </DrawerHeader>\n                        <DrawerBody>\n                            <Grid templateColumns='repeat(7, 1fr)' w='100%'>\n                                {simulationRefs.map((item, idx) => {\n                                    return (\n                                        <GridItem\n                                            alignContent='start'\n                                            w='100%'\n                                            colSpan={7}\n                                            variant=\"ghost\"\n                                            borderRadius={0}\n                                            onClick={() => {\n                                                onSimulationControlsDrawerClose()\n                                                item.func()\n                                            }}\n                                            color={currentLineColor}\n                                            fontSize={\"xl\"}\n                                            bg={\n                                                mode === item.name\n                                                    ? \"blue.400\"\n                                                    : currentBackgroundColor\n                                            }\n                                            _hover={() => { }}\n                                        >\n                                            <Button variant='ghost' w='100%' justifyContent='flex-start' leftIcon={item.icon}>\n                                                {item.name}\n                                            </Button>\n                                        </GridItem>\n                                    );\n                                })}\n                                {simulationOptions.map((item, idx) => {\n                                    return (\n                                        <GridItem\n                                            alignContent='start'\n                                            w='100%'\n                                            colSpan={7}\n                                            variant=\"ghost\"\n                                            borderRadius={0}\n                                            onClick={() => {\n                                                onSimulationControlsDrawerClose()\n                                                item.func()\n                                            }}\n                                            color={currentLineColor}\n                                            fontSize={\"xl\"}\n                                            bg={\n                                                mode === item.name\n                                                    ? \"blue.400\"\n                                                    : currentBackgroundColor\n                                            }\n                                            _hover={() => { }}\n                                        >\n                                            <Button variant='ghost' w='100%' justifyContent='flex-start' leftIcon={item.icon}>\n                                                {item.name}\n                                            </Button>\n                                        </GridItem>\n                                    );\n                                })}\n                                {simulationOperations.map((item, idx) => {\n                                    return (\n                                        <GridItem\n                                            alignContent='start'\n                                            w='100%'\n                                            colSpan={7}\n                                            variant=\"ghost\"\n                                            borderRadius={0}\n                                            onClick={() => {\n                                                onSimulationControlsDrawerClose()\n                                                item.func()\n                                            }}\n                                            color={currentLineColor}\n                                            fontSize={\"xl\"}\n                                            bg={\n                                                mode === item.name\n                                                    ? \"blue.400\"\n                                                    : currentBackgroundColor\n                                            }\n                                            _hover={() => { }}\n                                        >\n                                            <Button variant='ghost' w='100%' justifyContent='flex-start' leftIcon={item.icon}>\n                                                {item.name}\n                                            </Button>\n                                        </GridItem>\n                                    );\n                                })}\n                            </Grid>\n                        </DrawerBody>\n                    </DrawerContent>\n                </Drawer>\n\n                <Drawer isOpen={isSimulationListsDrawerOpen}\n                    placement='bottom'\n                    onClose={onSimulationListsDrawerClose}\n                >\n                    <DrawerOverlay />\n                    <DrawerContent>\n                        <DrawerCloseButton />\n                        <DrawerHeader>\n                            Simulation Lists\n                        </DrawerHeader>\n                        <DrawerBody>\n                            <Grid templateColumns='repeat(7, 1fr)' w='100%'>\n                                <GridItem colSpan={7}>\n                                    {setSimulationMenuForMobile()}\n                                </GridItem>\n                            </Grid>\n                        </DrawerBody>\n                    </DrawerContent>\n                </Drawer>\n\n                <Drawer isOpen={isPersonizationDrawerOpen}\n                    placement='bottom'\n                    onClose={onPersonizationDrawerClose}\n                >\n                    <DrawerOverlay />\n                    <DrawerContent>\n                        <DrawerCloseButton />\n                        <DrawerHeader>\n                            Personalize\n                        </DrawerHeader>\n                        <DrawerBody>\n                            <Grid templateColumns='repeat(7, 1fr)' w='100%'>\n                                <GridItem colSpan={7} my={1}>\n                                    <Input value={canvasTitle.current} onChange={(e) => {\n                                        canvasTitle.current = e.target.value\n                                        forceUpdate()\n                                    }} />\n                                </GridItem>\n                                <GridItem colSpan={7} my={1}>\n                                    <InputGroup>\n                                        <InputLeftAddon children={\"Rows\"} w={'20vw'} />\n                                        <Input\n                                            value={gridLines.current.numRows}\n                                            type=\"number\"\n                                            name=\"x\"\n                                            size=\"md\"\n                                            onChange={(e) => {\n                                                gridLines.current.numRows = parseInt(e.target.value)\n                                                forceUpdate()\n                                            }}\n                                        />\n                                    </InputGroup>\n                                </GridItem>\n                                <GridItem colSpan={7} my={1}>\n                                    <InputGroup>\n                                        <InputLeftAddon children={\"Cols\"} w={'20vw'} />\n                                        <Input\n                                            value={gridLines.current.numColumns}\n                                            type=\"number\"\n                                            name=\"y\"\n                                            size=\"md\"\n                                            onChange={(e) => {\n                                                gridLines.current.numColumns = parseInt(e.target.value)\n                                                forceUpdate()\n                                            }}\n                                        />\n\n                                    </InputGroup>\n                                </GridItem>\n                                <GridItem colSpan={7}>\n                                    <Button\n                                        colorScheme=\"blue\"\n                                        w={\"100%\"}\n                                        onClick={showGrids}\n                                    >\n                                        Set\n                                    </Button>\n                                </GridItem>\n                            </Grid>\n                        </DrawerBody>\n                    </DrawerContent>\n                </Drawer>\n\n            </Box>\n\n\n            {/* Modal to take the user input for naming the rally or footwork */}\n            <Modal\n                isOpen={isNameControlOpen && (mode === \"Rally\" || mode === \"Footwork\")}\n                onClose={onNameControlClose}\n                size={'xs'}\n\n            >\n                <ModalOverlay />\n                <ModalContent>\n                    <ModalHeader>\n                        {mode === \"Rally\" ? \"Set Rally Name\" : \"Set Footwork Name\"}\n                    </ModalHeader>\n                    <ModalCloseButton />\n                    <ModalBody>\n                        <Input\n                            autoFocus\n                            placeholder={mode === \"Rally\" ? \"Rally Name\" : \"Footwork Name\"}\n                            ref={rallyOrFootworkName}\n                        />\n                    </ModalBody>\n\n                    <ModalFooter>\n                        <Button colorScheme=\"red\" mx=\"3\" onClick={onNameControlClose}>\n                            Close\n                        </Button>\n                        <Button\n                            colorScheme=\"blue\"\n                            onClick={mode === \"Rally\" ? addRally : addFootwork}\n                            onMouseUp={onNameControlClose}\n                        >\n                            Set Name\n                        </Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n\n            {/* Modal for saving canvas */}\n            <Modal\n                isOpen={isSaveCanvasOpen}\n                onClose={onSaveCanvasClose}\n                size={'xs'}\n\n            >\n                <ModalOverlay />\n                <ModalContent>\n                    <ModalHeader>\n                        Save Canvas Settings\n                    </ModalHeader>\n                    <ModalCloseButton />\n                    <ModalBody>\n                        <Input value={canvasTitle.current} onChange={(e) => {\n                            canvasTitle.current = e.target.value\n                            forceUpdate()\n                        }} />\n                        <Checkbox mt={3} onChange={(e) => {\n                            saveSettings.current.keepObjects = e.target.checked\n                            forceUpdate()\n                        }} >\n                            Keep Rallies and footwork objects\n                        </Checkbox>\n                        <Text mt={3}>\n                            Export As :\n                        </Text>\n                        <Select onChange={(e) => {\n                            saveSettings.current.exportAs = e.target.value\n                        }}>\n                            <option value='image/svg+xml;charset=utf-8'>\n                                SVG\n                            </option>\n                            <option value='image/png'>\n                                PNG\n                            </option>\n                            <option value='image/jpg'>\n                                JPG\n                            </option>\n                            <option value='text/plain'>\n                                JSON\n                            </option>\n                        </Select>\n\n                    </ModalBody>\n\n                    <ModalFooter>\n                        <Button colorScheme=\"red\" mx=\"3\" onClick={onSaveCanvasClose}>\n                            Close\n                        </Button>\n                        <Button\n                            colorScheme=\"blue\"\n                            onClick={downloadCanvas}\n                            onMouseUp={onNameControlClose}\n                        >\n                            Download\n                        </Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n\n        </chakra.div>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/3d_court.8276496c.svg\";","export default __webpack_public_path__ + \"static/media/3d_court_colored_flat.57e6aa9d.svg\";","export default __webpack_public_path__ + \"static/media/Side_view.e6be5eae.svg\";","export default __webpack_public_path__ + \"static/media/Side_view_flat.e8013e19.svg\";","import \"./Layout.css\";\nimport FrontCourt3d from \"../assets/3d_court.svg\"\nimport FrontCourt3dFlat from \"../assets/3d_court_colored_flat.svg\"\nimport SideCourt3d from '../assets/Side_view.svg'\nimport SideCourt3dFlat from '../assets/Side_view_flat.svg'\nimport Shuttle from \"../assets/badminton_shuttle.png\";\nimport LeftBoot from \"../assets/left_boot.png\"\nimport RightBoot from \"../assets/right_boot.png\";\nimport download from 'downloadjs'\n\nimport { useEffect, useReducer, useRef, useState } from \"react\";\nimport {\n    Box,\n    chakra,\n    Button,\n    Stack,\n    Tooltip,\n    Text,\n    Flex,\n    Center,\n    SimpleGrid,\n    useColorMode,\n    useColorModeValue,\n    VStack,\n    useDisclosure,\n    OrderedList,\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalCloseButton,\n    ModalBody,\n    Input,\n    ModalFooter,\n    ListItem,\n    Checkbox,\n    Grid,\n    GridItem,\n    Popover,\n    PopoverBody,\n    PopoverHeader,\n    PopoverArrow,\n    PopoverCloseButton,\n    PopoverTrigger,\n    PopoverContent,\n    Accordion,\n    AccordionItem,\n    AccordionButton,\n    AccordionPanel,\n    Slider,\n    SliderTrack,\n    SliderFilledTrack,\n    SliderThumb,\n    Drawer,\n    DrawerBody,\n    DrawerHeader,\n    DrawerOverlay,\n    DrawerContent,\n    DrawerCloseButton,\n    Select,\n} from \"@chakra-ui/react\";\n\nimport { fabric } from \"fabric\";\nimport randomColor from 'randomcolor'\n\nimport {\n    BiCircle,\n    BiEdit,\n    BiPointer,\n    BiText,\n    BiTrash,\n    BsSquare,\n    BsTriangle,\n    GiShuttlecock,\n    IoEllipseOutline,\n    RiSubtractLine,\n    RiFootprintFill,\n    BsPlusCircle,\n    BiPlayCircle,\n    BiPauseCircle,\n    BiStopCircle,\n    BiVideoRecording,\n    BsPauseFill,\n    BiUndo,\n    AiOutlineClear,\n    MdDelete,\n    BiSave,\n    AiOutlineBgColors,\n    VscSymbolProperty,\n    AiOutlineReload,\n    BsSun,\n    BsMoon,\n    GiRunningShoe,\n    FaShapes,\n    RiRemoteControl2Line,\n    GiGears,\n    IoIosListBox,\n    BiCustomize,\n    AiOutlineDownload,\n    BsPlayFill,\n    BsStopFill,\n    BsDownload\n} from \"react-icons/all\";\n\nimport {\n    isMobile,\n    isTablet,\n    isBrowser,\n} from 'react-device-detect'\n\nimport {\n    useParams\n} from 'react-router-dom'\n\n// Layout Function has Layout of Court as well as controls\n\nexport default function Layout3D(props) {\n\n    // Drawer for Mobile Devices\n    const { isOpen: isObjectsDrawerOpen, onOpen: onObjectsDrawerOpen, onClose: onObjectsDrawerClose } = useDisclosure()\n    const { isOpen: isSimulationControlsDrawerOpen, onOpen: onSimulationControlsDrawerOpen, onClose: onSimulationControlsDrawerClose } = useDisclosure()\n    const { isOpen: isControlsDrawerOpen, onOpen: onControlsDrawerOpen, onClose: onControlsDrawerClose } = useDisclosure()\n    const { isOpen: isSimulationListsDrawerOpen, onOpen: onSimulationListsDrawerOpen, onClose: onSimulationListsDrawerClose } = useDisclosure()\n    const { isOpen: isPersonizationDrawerOpen, onOpen: onPersonizationDrawerOpen, onClose: onPersonizationDrawerClose } = useDisclosure()\n\n    // Color Mode State Variable\n    const { colorMode, toggleColorMode } = useColorMode();\n\n    /**\n     * Following State Variables are required to Draw Canvas,\n     * its height, width, etc.\n     */\n\n    // Create Reference to parent Box\n    const boxDiv = useRef(null);\n\n    // Get Dimensions of parent Box\n    const [dims, setDims] = useState({\n        boxW: 0.1,\n        boxH: 0.1,\n    });\n\n    // Title for Canvas\n    const canvasTitle = useRef(\"Untitled\")\n\n    // Initialize Canvas\n    const [canvas, setCanvas] = useState(null);\n\n    // Canvas Storing Objects\n    const canvasJSON = useRef(null)\n    const canvasSVG = useRef(null)\n\n    // Canvas Recording Object\n    const canvasRecorder = useRef(null)\n    const canvasStream = useRef(null)\n    const canvasrecordingChunks = useRef(null)\n\n    // Variable to store current selected object\n    const [currentObject, setCurrentObject] = useState(null);\n\n    // Variable to Keep Track of added Objects\n    const canvasObjects = useRef([]);\n\n    // Create a Mode Variable to Highlight which mode is active\n    const [mode, setMode] = useState(\"Pointer\");\n\n    // Create Save Settings reference Object\n    const saveSettings = useRef({\n        keepObjects: false,\n        exportAs: 'image/svg+xml;charset=utf-8'\n    })\n\n    /**\n     * Variables for Drawing Objects\n     */\n\n    let isDown = false;\n    let startX = 0;\n    let startY = 0;\n\n    /**\n     * State Variable to Force Re render on screen (of right menu)\n     * @returns None\n     * @updates None\n     */\n\n    const [, forceUpdate] = useReducer((x) => x + 1, 0);\n\n    /**\n     * Simulation Related State Variables\n     */\n\n    // Array to store all shots played\n    const arrayOfRallies = useRef({\n        currentActiveIndex: 0,\n        rallies: [],\n    });\n\n    // disclosure variables for controlling the change name modal\n    const { isOpen: isNameControlOpen, onOpen: onNameControlOpen, onClose: onNameControlClose } = useDisclosure();\n\n    // disclosure variable for controlling save canvas options\n    const { isOpen: isSaveCanvasOpen, onOpen: onSaveCanvasOpen, onClose: onSaveCanvasClose } = useDisclosure()\n\n    // reference variable to get the rally name or footwork name\n    const rallyOrFootworkName = useRef(null);\n\n    // Array to store all footwork patterns\n    const arrayOfFootwork = useRef({\n        currentActiveIndex: 0,\n        footworks: [],\n    });\n\n    // Variable to keep track of show all rallies\n    const showAllRallies = useRef(false);\n\n    // Varaible to keep track of show all footworks\n    const showAllFootworks = useRef(false);\n\n    // Run animation flag\n    const runFlag = useRef(false);\n\n    // Shuttle Animation Object\n    const shuttleAnimationObject = useRef(null);\n\n    // Footwork Animaton Object\n    const rightFootworkAnimationObject = useRef(null);\n    const leftFootworkAnimationObject = useRef(null);\n    const footworkAnimationObject = useRef(null);\n\n    // Experimental \n    const {templateName} = useParams()\n    console.log(\"Template Name : \", templateName)\n\n\n    /**\n     * Initialize Canvas every time reload happens\n     * @updates {canvas}\n     * @returns canvas with appropriate height and width\n     */\n\n    const initCanvas = () => {\n\n        fabric.Image.prototype.getSvgSrc = function () {\n            return this.toDataURLforSVG();\n        };\n\n        fabric.Image.prototype.toDataURLforSVG = function (options) {\n            var el = fabric.util.createCanvasElement();\n            el.width = this._element.naturalWidth || this._element.width;\n            el.height = this._element.naturalHeight || this._element.height;\n            el.getContext(\"2d\").drawImage(this._element, 0, 0);\n            var data = el.toDataURL(options);\n            return data;\n        };\n\n        fabric.Object.prototype.transparentCorners = false\n        fabric.Object.prototype.cornerColor = '#00008B'\n        fabric.Object.prototype.cornerStyle = 'circle'\n        fabric.Object.prototype.borderColor = 'red'\n\n        const canvas = new fabric.Canvas(\"canvas\", {\n            height: dims.boxH,\n            width: dims.boxW,\n        });\n\n        console.log(props.loader)\n        if (props.loader !== undefined) {\n            console.log(\"Loader is ON\")\n            canvas.loadSVGFromURL(props.loader.canvasData, ((objects, options) => {\n                for (let i = 0; i < objects.length; i++) {\n                    canvas.add(objects[i])\n                }\n            }))\n            canvas.renderAll()\n            arrayOfRallies.current = props.loader.rallyData\n            arrayOfFootwork.current = props.loader.footworkData\n        }\n        else if (props.flat === \"Front\") {\n            console.log(\"Flat : \", props.flat)\n            fabric.loadSVGFromURL(FrontCourt3d, (objects, options) => {\n\n                var obj = fabric.util.groupSVGElements(objects, options);\n                obj.set({\n                    selectable: false,\n                    scaleX: canvas.width / obj.width,\n                    scaleY: canvas.height / obj.height,\n                })\n                canvas.add(obj)\n                canvas.setBackgroundColor('white')\n            })\n        } else if (props.flat === \"Front_Flat\") {\n            console.log(\"Flat : \", props.flat)\n            fabric.loadSVGFromURL(FrontCourt3dFlat, (objects, options) => {\n                var obj = fabric.util.groupSVGElements(objects, options);\n                obj.set({\n                    selectable: false,\n                    scaleX: canvas.width / obj.width,\n                    scaleY: canvas.height / obj.height,\n                })\n                canvas.add(obj)\n                canvas.setBackgroundColor('white')\n            })\n        }\n        else if (props.flat === \"Side\") {\n            console.log(\"Flat : \", props.flat)\n            fabric.loadSVGFromURL(SideCourt3d, (objects, options) => {\n                var obj = fabric.util.groupSVGElements(objects, options);\n                obj.set({\n                    selectable: false,\n                    scaleX: canvas.width / obj.width,\n                    scaleY: canvas.height / obj.height,\n                })\n                canvas.add(obj)\n                canvas.setBackgroundColor('white')\n            })\n        }\n        else if (props.flat === \"Side_Flat\") {\n            console.log(\"Flat : \", props.flat)\n            fabric.loadSVGFromURL(SideCourt3dFlat, (objects, options) => {\n                var obj = fabric.util.groupSVGElements(objects, options);\n                obj.set({\n                    selectable: false,\n                    scaleX: canvas.width / obj.width,\n                    scaleY: canvas.height / obj.height,\n                })\n                canvas.add(obj)\n                canvas.setBackgroundColor('white')\n            })\n        } else {\n            canvas.setBackgroundColor(\"white\")\n        }\n        return canvas;\n    };\n\n    /**\n     * Get Parent Dimensions of Canvas\n     * and call initCanvas()\n     * @updates {canvas}\n     * @wrapper for initCanvas()\n     * @returns none\n     */\n\n    const loadCanvas = () => {\n        setDims({\n            boxW: boxDiv.current.clientWidth,\n            boxH: boxDiv.current.clientHeight,\n        });\n        if (canvas !== null) {\n            canvas.clear();\n        }\n        setCanvas(initCanvas());\n    };\n\n    /**\n     * @listens boxDiv\n     * Reloads Canvas on Change in Dimensions\n     * @returns none\n     */\n\n    useEffect(() => {\n        loadCanvas();\n        // eslint-disable-next-line\n    }, [boxDiv.current]);\n\n    /**\n     * Add Object Select Listener\n     * Add Object De-select Listener\n     * Following 2 functions do the above task\n     * First function is responsible for setting and unsetting of object variable\n     * Second function is required to check initialization of Canvas (exception handling)\n     * and setting listerners accordingly\n     * @updates {canvas}\n     * @returns none\n     */\n\n    const updateSelectedObject = () => {\n        setCurrentObject(canvas.getActiveObject());\n    };\n\n    // Check if Canvas is Initialized, if yes, add Object Listeners to it\n    (() => {\n        if (canvas === null) {\n            setTimeout(1000, this);\n        } else {\n            canvas.on(\"selection:created\", updateSelectedObject);\n            canvas.on(\"selection:updated\", updateSelectedObject);\n            canvas.on(\"selection:cleared\", updateSelectedObject);\n            canvas.on(\"object:modified\", updateSelectedObject);\n            return;\n        }\n    })();\n\n    /**\n     * Clears all Mouse Events for canvas\n     * @updates {canvas}\n     * @returns none\n     */\n\n    const clearMouseListeners = () => {\n        canvas.off(\"mouse:down\"); // Event Name\n        canvas.off(\"mouse:move\");\n        canvas.off(\"mouse:up\");\n    };\n\n    /**\n     * Receives object as a parameter\n     * Adds object to canvas\n     * @updates {canvasObjects, canvas}\n     * @returns None\n     */\n\n    const addObjectToArray = (object) => {\n        canvasObjects.current.push(object);\n    };\n\n    /**\n     * Draws Circle on Canvas with moving animation\n     * As per pointer on screen\n     * Uses only X value as radius, main differentiating factor between\n     * Circle and Ellipse\n     * Creates 1 circle and changes mode\n     * @returns none\n     * @updates {canvas, mode}\n     */\n\n    const addCircle = () => {\n        clearMouseListeners();\n        canvas.isDrawingMode = false;\n        setMode(\"Circle\");\n        let circle;\n\n        for (let i = 0; i < canvasObjects.current.length; i++) {\n            canvasObjects.current[i].set({\n                selectable: false,\n            });\n        }\n\n        canvas.on(\"mouse:down\", (event) => {\n            isDown = true;\n            startX = canvas.getPointer(event.e).x;\n            startY = canvas.getPointer(event.e).y;\n            circle = new fabric.Circle({\n                radius: 0,\n                left: startX,\n                top: startY,\n                selectable: true,\n                fill: \"transparent\",\n                stroke: \"black\",\n                strokeWidth: 3,\n            });\n            canvas.add(circle);\n            addObjectToArray(circle);\n\n            circle.set({\n                left: startX,\n                top: startY,\n            });\n        });\n\n        canvas.on(\"mouse:move\", (event) => {\n            if (isDown) {\n                let currPosX = canvas.getPointer(event.e).x;\n                circle.set({\n                    radius: Math.abs((startX - currPosX) / 2),\n                });\n                canvas.renderAll();\n            }\n        });\n\n        canvas.on(\"mouse:up\", () => {\n            isDown = false;\n            clearMouseListeners();\n            for (let i = 0; i < canvasObjects.current.length; i++) {\n                canvasObjects.current[i].set({\n                    selectable: true,\n                });\n            }\n\n            setMode(\"none\");\n            return;\n        });\n    };\n\n    /**\n     * Draws Rectangle/Square on Canvas with moving animation\n     * As per pointer on screen\n     * Creates 1 rectangle and changes mode\n     * @returns none\n     * @updates {canvas, mode}\n     */\n\n    const addRectangle = () => {\n        clearMouseListeners();\n        canvas.isDrawingMode = false;\n        setMode(\"Rectangle/Square\");\n        var rectangle;\n\n        for (let i = 0; i < canvasObjects.current.length; i++) {\n            canvasObjects.current[i].set({\n                selectable: false,\n            });\n        }\n\n        canvas.on(\"mouse:down\", (event) => {\n            isDown = true;\n            startX = canvas.getPointer(event.e).x;\n            startY = canvas.getPointer(event.e).y;\n            rectangle = new fabric.Rect({\n                hasControls: true,\n                height: 1,\n                width: 1,\n                left: startX,\n                top: startY,\n                selectable: true,\n                fill: \"transparent\",\n                stroke: \"black\",\n                strokeWidth: 3,\n            });\n            canvas.add(rectangle);\n            addObjectToArray(rectangle);\n        });\n\n        canvas.on(\"mouse:move\", (event) => {\n            if (isDown) {\n                let currPosX = canvas.getPointer(event.e).x;\n                let currPosY = canvas.getPointer(event.e).y;\n                rectangle.set({\n                    height: currPosY - startY,\n                    width: currPosX - startX,\n                });\n                canvas.renderAll();\n            }\n        });\n\n        canvas.on(\"mouse:up\", (event) => {\n            isDown = false;\n            clearMouseListeners();\n            for (let i = 0; i < canvasObjects.current.length; i++) {\n                canvasObjects.current[i].set({\n                    selectable: true,\n                });\n            }\n\n            setMode(\"none\");\n            return;\n        });\n    };\n\n    /**\n     * Draws Ellipse on Canvas with moving animation\n     * As per pointer on screen\n     * Uses X and Y values for drawing Ellipse\n     * Creates 1 Ellipse and changes mode\n     * @returns none\n     * @updates {canvas, mode}\n     */\n\n    const addEllipse = () => {\n        clearMouseListeners();\n        canvas.isDrawingMode = false;\n        setMode(\"Ellipse\");\n        var ellipse;\n\n        for (let i = 0; i < canvasObjects.current.length; i++) {\n            canvasObjects.current[i].set({\n                selectable: false,\n            });\n        }\n\n        canvas.on(\"mouse:down\", (event) => {\n            isDown = true;\n            startX = canvas.getPointer(event.e).x;\n            startY = canvas.getPointer(event.e).y;\n            ellipse = new fabric.Ellipse({\n                hasControls: true,\n                left: startX,\n                top: startY,\n                originX: \"left\",\n                originY: \"top\",\n                rx: 0,\n                ry: 0,\n                angle: 0,\n                selectable: true,\n                fill: \"transparent\",\n                stroke: \"black\",\n                strokeWidth: 3,\n            });\n            canvas.add(ellipse);\n            addObjectToArray(ellipse);\n        });\n\n        canvas.on(\"mouse:move\", (event) => {\n            if (isDown) {\n                let currPosX = canvas.getPointer(event.e).x;\n                let currPosY = canvas.getPointer(event.e).y;\n                ellipse.set({\n                    rx: (currPosX - startX) / 2,\n                    ry: (currPosY - startY) / 2,\n                });\n                canvas.renderAll();\n            }\n        });\n\n        canvas.on(\"mouse:up\", (event) => {\n            isDown = false;\n            clearMouseListeners();\n            for (let i = 0; i < canvasObjects.current.length; i++) {\n                canvasObjects.current[i].set({\n                    selectable: true,\n                });\n            }\n\n            setMode(\"none\");\n            return;\n        });\n    };\n\n    /**\n     * Draws Triangle on Canvas with moving animation\n     * As per pointer on screen\n     * Uses X and Y values for drawing Triangle\n     * Creates 1 Triangle and changes mode\n     * @returns none\n     * @updates {canvas, mode}\n     */\n\n    const addTriangle = () => {\n        clearMouseListeners();\n        canvas.isDrawingMode = false;\n        setMode(\"Triangle\");\n        var triangle;\n\n        for (let i = 0; i < canvasObjects.current.length; i++) {\n            canvasObjects.current[i].set({\n                selectable: false,\n            });\n        }\n\n        canvas.on(\"mouse:down\", (event) => {\n            isDown = true;\n            startX = canvas.getPointer(event.e).x;\n            startY = canvas.getPointer(event.e).y;\n            triangle = new fabric.Triangle({\n                hasControls: true,\n                height: 0,\n                width: 0,\n                left: startX,\n                top: startY,\n                selectable: true,\n                fill: \"transparent\",\n                stroke: \"black\",\n                strokeWidth: 3,\n            });\n            canvas.add(triangle);\n            addObjectToArray(triangle);\n        });\n\n        canvas.on(\"mouse:move\", (event) => {\n            if (isDown) {\n                let currPosX = canvas.getPointer(event.e).x;\n                let currPosY = canvas.getPointer(event.e).y;\n                triangle.set({\n                    width: currPosX - startX,\n                    height: currPosY - startY,\n                });\n                canvas.renderAll();\n            }\n        });\n\n        canvas.on(\"mouse:up\", () => {\n            isDown = false;\n            clearMouseListeners();\n            for (let i = 0; i < canvasObjects.current.length; i++) {\n                canvasObjects.current[i].set({\n                    selectable: true,\n                });\n            }\n\n            setMode(\"none\");\n            return;\n        });\n    };\n\n    /**\n     * Draws Line on Canvas with moving animation\n     * As per pointer on screen\n     * Uses X and Y values for drawing Line\n     * Creates 1 Line and changes mode\n     * @returns none\n     * @updates {canvas, mode}\n     */\n\n    const addLine = () => {\n        clearMouseListeners();\n        canvas.isDrawingMode = false;\n        setMode(\"Line\");\n        var line;\n\n        for (let i = 0; i < canvasObjects.current.length; i++) {\n            canvasObjects.current[i].set({\n                selectable: false,\n            });\n        }\n\n        canvas.on(\"mouse:down\", (event) => {\n            isDown = true;\n            startX = canvas.getPointer(event.e).x;\n            startY = canvas.getPointer(event.e).y;\n            line = new fabric.Line([startX, startY, startX, startY], {\n                left: startX,\n                top: startY,\n                selectable: true,\n                fill: \"transparent\",\n                stroke: \"black\",\n                strokeWidth: 3,\n            });\n            canvas.add(line);\n            addObjectToArray(line);\n        });\n\n        canvas.on(\"mouse:move\", (event) => {\n            if (isDown) {\n                let currPosX = canvas.getPointer(event.e).x;\n                let currPosY = canvas.getPointer(event.e).y;\n                line.set({\n                    x2: currPosX,\n                    y2: currPosY,\n                });\n                canvas.renderAll();\n            }\n        });\n\n        canvas.on(\"mouse:up\", () => {\n            isDown = false;\n            line.setCoords();\n            clearMouseListeners();\n            for (let i = 0; i < canvasObjects.current.length; i++) {\n                canvasObjects.current[i].set({\n                    selectable: true,\n                });\n            }\n\n            setMode(\"none\");\n            return;\n        });\n    };\n\n    /**\n     * Creates free Drawing Mode on Canvas\n     * @returns none\n     * @updates {canvas, mode}\n     */\n\n    const freeDraw = () => {\n        setMode(\"Draw\");\n        clearMouseListeners();\n        canvas.isDrawingMode = true;\n    };\n\n    /**\n     * Activates Pointer Mode on Canvas\n     * This is Default mode\n     * @updates {canvas, mode}\n     */\n\n    const pointerMode = () => {\n        clearMouseListeners();\n        setMode(\"Pointer\");\n        canvas.isDrawingMode = false;\n    };\n\n    /**\n     * Adds a p box to Canvas\n     * Uses current X and Y values to place the p box\n     * @returns none\n     * @updates {canvas, mode}\n     */\n\n    // Add Text to canvas\n    const addText = () => {\n        clearMouseListeners();\n        canvas.isDrawingMode = false;\n        // canvas.__eventListeners = {}\n        setMode(\"Text\");\n        var p;\n\n        for (let i = 0; i < canvasObjects.current.length; i++) {\n            canvasObjects.current[i].set({\n                selectable: false,\n            });\n        }\n\n        canvas.on(\"mouse:down\", (event) => {\n            startX = canvas.getPointer(event.e).x;\n            startY = canvas.getPointer(event.e).y;\n            p = new fabric.IText(\"Tap and Type\", {\n                fontFamily: \"Quicksand\",\n                left: startX,\n                top: startY,\n                fontSize: 30,\n            });\n\n            canvas.add(p);\n            addObjectToArray(p);\n        });\n\n        canvas.on(\"mouse:up\", () => {\n            for (let i = 0; i < canvasObjects.current.length; i++) {\n                canvasObjects.current[i].set({\n                    selectable: true,\n                });\n            }\n\n            setMode(\"none\");\n            clearMouseListeners();\n        });\n    };\n\n    /**\n     * Adds a Shuttlecock Object to Canvas\n     * Uses current X and Y values to place the shuttlecock image\n     * @updates {canvas}\n     * @returns None\n     */\n\n    const addShuttleObject = () => {\n        clearMouseListeners();\n        canvas.isDrawingMode = false;\n        // canvas.__eventListeners = {}\n        setMode(\"Shuttle Object\");\n\n        for (let i = 0; i < canvasObjects.current.length; i++) {\n            canvasObjects.current[i].set({\n                selectable: false,\n            });\n        }\n\n        canvas.on(\"mouse:down\", (event) => {\n            startX = canvas.getPointer(event.e).x;\n            startY = canvas.getPointer(event.e).y;\n            new fabric.Image.fromURL(Shuttle, (img) => {\n                img.set({\n                    left: startX,\n                    top: startY\n                })\n                img.scaleToWidth(40)\n                canvas.add(img);\n                canvas.renderAll()\n                addObjectToArray(img);\n            })\n\n        });\n\n        canvas.on(\"mouse:up\", () => {\n            for (let i = 0; i < canvasObjects.current.length; i++) {\n                canvasObjects.current[i].set({\n                    selectable: true,\n                });\n            }\n\n            setMode(\"none\");\n            clearMouseListeners();\n        });\n    }\n\n    /**\n     * Adds a Shoe Object to Canvas\n     * Uses current X and Y values to place the shuttlecock image\n     * @updates {canvas}\n     * @returns None\n     */\n\n    const addShoeObject = (isRightBoot) => {\n        clearMouseListeners();\n        canvas.isDrawingMode = false;\n        // canvas.__eventListeners = {}\n        setMode(\"Shuttle Object\");\n\n        for (let i = 0; i < canvasObjects.current.length; i++) {\n            canvasObjects.current[i].set({\n                selectable: false,\n            });\n        }\n\n        canvas.on(\"mouse:down\", (event) => {\n            startX = canvas.getPointer(event.e).x;\n            startY = canvas.getPointer(event.e).y;\n            new fabric.Image.fromURL(RightBoot, (img) => {\n                img.set({\n                    left: startX,\n                    top: startY\n                })\n                img.scaleToWidth(40)\n                if (!isRightBoot) {\n                    img.set({\n                        flipX: true\n                    })\n                }\n                canvas.add(img);\n                addObjectToArray(img);\n            })\n\n        });\n\n        canvas.on(\"mouse:up\", () => {\n            for (let i = 0; i < canvasObjects.current.length; i++) {\n                canvasObjects.current[i].set({\n                    selectable: true,\n                });\n            }\n\n            setMode(\"none\");\n            clearMouseListeners();\n        });\n    }\n\n    /**\n     * Saves current State of canvas\n     * @returns None\n     */\n\n    const saveCanvas = () => {\n        canvasJSON.current = canvas.toDatalessJSON()\n        canvasSVG.current = canvas.toSVG()\n    }\n\n    /**\n     * Function to download canvas object\n     * Uses current canvas objects to download in the form of an image or json\n     */\n\n    const downloadCanvas = () => {\n\n        saveCanvas()\n        if (!saveSettings.current.keepObjects) {\n            clearAllRallyObjects()\n            clearAllFootworkObjects()\n        }\n\n        setMode(\"Pointer\")\n\n        setTimeout(() => {\n            let file;\n            if (saveSettings.current.exportAs === 'text/plain') {\n                let content = {\n                    canvasTitle: canvasTitle.current,\n                    canvasData: canvasJSON.current,\n                    rallyData: arrayOfRallies.current,\n                    footworkData: arrayOfFootwork.current\n                }\n                file = new Blob([JSON.stringify(content)], { type: saveSettings.current.exportAs })\n                download(file, canvasTitle.current + \" with sim. data.json\")\n            } else {\n                if (saveSettings.current.exportAs === 'image/svg+xml;charset=utf-8') {\n                    file = new Blob([canvasSVG.current], { type: saveSettings.current.exportAs });\n                    download(file, canvasTitle.current + \".svg\")\n                } else if (saveSettings.current.exportAs === 'image/png') {\n                    file = new Blob([canvasSVG.current], { type: saveSettings.current.exportAs });\n                    download(file, canvasTitle.current + \".png\")\n                } else {\n                    file = new Blob([canvasSVG.current], { type: saveSettings.current.exportAs });\n                    download(file, canvasTitle.current + \".jpg\")\n                }\n            }\n        }, 200);\n    }\n    /**\n     * Deletes Selected Item from Canvas\n     * @returns none\n     * @updates {canvas}\n     */\n\n    const deleteItem = () => {\n        clearMouseListeners();\n        canvas.isDrawingMode = false;\n        let activeObject = canvas.getActiveObject();\n\n        if (activeObject) {\n            canvas.remove(activeObject);\n        }\n    };\n\n    /**\n     * Removes all objects from Canvas\n     * @returns none\n     * @updates {canvas}\n     */\n\n    const clearCanvas = () => {\n        clearMouseListeners();\n        canvas.isDrawingMode = false;\n        let objects = canvas.getObjects();\n        for (var i = 0; i < objects.length; i++) {\n            canvas.remove(objects[i]);\n        }\n        canvas.renderAll();\n        // Remove everything from canvasObjects Array\n        canvasObjects.current = [];\n    };\n\n    /**\n     * Set Background Color for Canvas\n     */\n\n    const selectCanvasBackground = () => {\n        const list = [\"white\", \"#d4edad\", \"#82cdcd\", \"#eedd82\", \"#82cda8\", \"#82a8cd\", \"#cd8282\", \"orange\", \"yellow\", \"red\", \"teal\", \"blue\", \"cyan\", \"purple\", \"pink\"]\n        return (\n            list.map((item) => (\n                <Button key={item} bg={item} value={item} m=\"1\" borderRadius={'100%'} size='sm' onClick={\n                    () => {\n                        canvas.setBackgroundColor(item)\n                        canvas.renderAll()\n                    }}> </Button>\n            ))\n        )\n    }\n\n    /**\n     * Controls Menu\n     * Calls all above functions as per options\n     */\n\n    const objectsMenu = [\n        {\n            name: \"Draw\",\n            icon: <BiEdit />,\n            func: freeDraw,\n        },\n        {\n            name: \"Pointer\",\n            icon: <BiPointer />,\n            func: pointerMode,\n        },\n        {\n            name: \"Circle\",\n            icon: <BiCircle />,\n            func: addCircle,\n        },\n        {\n            name: \"Rectangle/Square\",\n            icon: <BsSquare />,\n            func: addRectangle,\n        },\n        {\n            name: \"Ellipse\",\n            icon: <IoEllipseOutline />,\n            func: addEllipse,\n        },\n        {\n            name: \"Triangle\",\n            icon: <BsTriangle />,\n            func: addTriangle,\n        },\n        {\n            name: \"Line\",\n            icon: <RiSubtractLine />,\n            func: addLine,\n        },\n        {\n            name: \"Text\",\n            icon: <BiText />,\n            func: addText,\n        },\n        {\n            name: \"Shuttle Object\",\n            icon: <GiShuttlecock />,\n            func: addShuttleObject,\n        },\n        {\n            name: \"Right Boot\",\n            icon: <GiRunningShoe />,\n            func: () => addShoeObject(true),\n        },\n        {\n            name: \"Left Boot\",\n            icon: <GiRunningShoe />,\n            func: () => addShoeObject(false),\n        }\n    ];\n\n    /**\n     * Control Objects using a simple set of Controls\n     */\n\n    const canvasControlMenu = [\n        {\n            name: \"Save\",\n            icon: <BiSave />,\n            func: saveCanvas,\n        },\n        {\n            name: \"Download\",\n            icon: <AiOutlineDownload />,\n            func: onSaveCanvasOpen,\n        },\n        {\n            name: \"Delete\",\n            icon: <BiTrash />,\n            func: deleteItem,\n        },\n        {\n            name: \"Reload Canvas\",\n            icon: <AiOutlineReload />,\n            func: () => {\n                if (window.confirm(\"Do you really want to Reload Canvas? You will lose all your work\")) {\n                    // Get all Objects and Remove them one by one\n                    let objects = canvas.getObjects();\n                    for (var i = 1; i < objects.length; i++) {\n                        canvas.remove(objects[i]);\n                    }\n                    canvas.renderAll();\n\n                    // Remove everything from CanvasObjects array also\n                    canvasObjects.current = [];\n                }\n            }\n        },\n        {\n            name: \"Clear History\",\n            icon: <AiOutlineClear />,\n            func: () => {\n                if (\n                    window.confirm(\"Do you want clear canvas? It cannot be recovered.\")\n                ) {\n                    clearCanvas()\n                    initCanvas()\n                }\n            },\n        }, {\n            name: colorMode === \"light\" ? \"Dark Mode\" : \"Light Mode\",\n            icon: colorMode === \"light\" ? <BsMoon /> : <BsSun />,\n            func: toggleColorMode,\n        },\n    ];\n\n    /**\n     * Following Code is related to Simulation, all functions henceforth do either Animations\n     * or are responsible for creating Rallies and movement of objects on the Canvas\n     */\n\n    /**\n     * Checks Value given and returns in which half\n     * the value resides vertically\n     * @param {number} YValue <Height of Canvas>\n     * @returns {2} if YValue is in lower half\n     * @returns {1} if YValue is in upper half\n     * @updates none\n     */\n\n    const checkHalfVertical = (YValue) => {\n        if (YValue > dims.boxH / 2) {\n            return 2;\n        } else {\n            return 1;\n        }\n    };\n\n    /**\n     * Remove all objects from all other rallies\n     * @updates None\n     * @return None\n     */\n\n    const clearAllRallyObjects = () => {\n        for (let i = 0; i < arrayOfRallies.current.rallies.length; i++) {\n            for (\n                let j = 0;\n                j < arrayOfRallies.current.rallies[i].objectHistory.length;\n                j++\n            ) {\n                canvas.remove(arrayOfRallies.current.rallies[i].objectHistory[j]);\n            }\n        }\n    };\n\n    /**\n     * Draw Rally Objects on screen as per demand\n     * If only current one is to be displayed\n     * @param showCurrentOnly is set to true\n     * Else is set to false\n     */\n\n    const drawRallyObjectsOnCanvas = (showCurrentOnly) => {\n        if (arrayOfRallies.current.rallies.length === 0) {\n            return;\n        }\n        if (showCurrentOnly) {\n            for (\n                let i = 0;\n                i <\n                arrayOfRallies.current.rallies[\n                    arrayOfRallies.current.currentActiveIndex\n                ].objectHistory.length;\n                i++\n            ) {\n                canvas.add(\n                    arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].objectHistory[i]\n                );\n            }\n        } else {\n            for (let i = 0; i < arrayOfRallies.current.rallies.length; i++) {\n                for (\n                    let j = 0;\n                    j < arrayOfRallies.current.rallies[i].objectHistory.length;\n                    j++\n                ) {\n                    canvas.add(arrayOfRallies.current.rallies[i].objectHistory[j]);\n                }\n            }\n        }\n    };\n\n    /**\n     * Creates Rally where user can select any point on court\n     * after which he has to select a point on Vertically opposite side\n     * of current point if Canvas was divided into 2 vertical zones\n     * @updates {arrayOfRallies}\n     * @returns None\n     */\n\n    const constructRally = () => {\n        clearAllRallyObjects();\n        clearAllFootworkObjects()\n        if (showAllRallies.current) {\n            drawRallyObjectsOnCanvas(false);\n        } else {\n            drawRallyObjectsOnCanvas(true);\n        }\n        clearMouseListeners();\n        setMode(\"Rally\");\n        canvas.on(\"mouse:down\", (event) => {\n            // console.log(arrayOfRallies.current)\n            if (arrayOfRallies.current.rallies.length === 0) {\n                window.alert('No Rallies Created, press the \"+\" button to add rallies');\n                return;\n            }\n            let currentX = canvas.getPointer(event.e).x;\n            let currentY = canvas.getPointer(event.e).y;\n\n            // console.log(arrayOfRallies.current.currentActiveIndex)\n\n            // If array is empty, then do not check where Point has been placed\n            // console.log(\"This matters\", arrayOfRallies.current.currentActiveIndex)\n\n            if (\n                arrayOfRallies.current.rallies[\n                    arrayOfRallies.current.currentActiveIndex\n                ].shots.length === 0\n            ) {\n                arrayOfRallies.current.rallies[\n                    arrayOfRallies.current.currentActiveIndex\n                ].shots.push({\n                    x: currentX,\n                    y: currentY,\n                });\n\n                // Set lastY value\n                arrayOfRallies.current.rallies[\n                    arrayOfRallies.current.currentActiveIndex\n                ].lastY = checkHalfVertical(currentY);\n\n                let circle = new fabric.Circle({\n                    radius: 6,\n                    left: currentX - 3,\n                    top: currentY - 3,\n                    fill: arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].color,\n                    selectable: false,\n                    stroke: arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].color,\n                    strokeWidth: 1,\n                });\n\n                let p = new fabric.IText(\n                    arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].shots.length + \"\",\n                    {\n                        fontFamily: \"Quicksand\",\n                        stroke: arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].color,\n                        left: currentX + 12,\n                        top: currentY,\n                        fontSize: 20,\n                        editable: false,\n                        selectable: false,\n                    }\n                );\n\n                let group = new fabric.Group([p, circle], {\n                    selectable: false\n                })\n\n                canvas.add(group);\n\n                arrayOfRallies.current.rallies[\n                    arrayOfRallies.current.currentActiveIndex\n                ].objectHistory.push(group);\n\n            }\n\n            // Otherwise check in which half last Point was recorded\n            else if (\n                arrayOfRallies.current.rallies[\n                    arrayOfRallies.current.currentActiveIndex\n                ].shots.length > 0\n            ) {\n                // console.log(\"current \", currPointLocY)\n                // console.log(\"Compare \", curshotArray.lengthrPointLocY, rallyLastY)\n\n\n                arrayOfRallies.current.rallies[\n                    arrayOfRallies.current.currentActiveIndex\n                ].shots.push({\n                    x: currentX,\n                    y: currentY,\n                });\n\n                // Set rallyLastY value\n                arrayOfRallies.current.rallies[\n                    arrayOfRallies.current.currentActiveIndex\n                ].lastY = checkHalfVertical(currentY);\n\n                let circle = new fabric.Circle({\n                    radius: 6,\n                    left: currentX - 3,\n                    top: currentY - 3,\n                    fill: arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].color,\n                    selectable: false,\n                    stroke: arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].color,\n                    strokeWidth: 1,\n                });\n\n                let p = new fabric.IText(\n                    arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].shots.length + \"\",\n                    {\n                        fontFamily: \"Quicksand\",\n                        stroke: arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].color,\n                        left: currentX + 12,\n                        top: currentY,\n                        fontSize: 20,\n                        editable: false,\n                        selectable: false,\n                    }\n                );\n\n                let line = new fabric.Line(\n                    [\n                        arrayOfRallies.current.rallies[\n                            arrayOfRallies.current.currentActiveIndex\n                        ].shots[\n                            arrayOfRallies.current.rallies[\n                                arrayOfRallies.current.currentActiveIndex\n                            ].shots.length - 1\n                        ].x,\n                        arrayOfRallies.current.rallies[\n                            arrayOfRallies.current.currentActiveIndex\n                        ].shots[\n                            arrayOfRallies.current.rallies[\n                                arrayOfRallies.current.currentActiveIndex\n                            ].shots.length - 1\n                        ].y,\n                        arrayOfRallies.current.rallies[\n                            arrayOfRallies.current.currentActiveIndex\n                        ].shots[\n                            arrayOfRallies.current.rallies[\n                                arrayOfRallies.current.currentActiveIndex\n                            ].shots.length - 2\n                        ].x,\n                        arrayOfRallies.current.rallies[\n                            arrayOfRallies.current.currentActiveIndex\n                        ].shots[\n                            arrayOfRallies.current.rallies[\n                                arrayOfRallies.current.currentActiveIndex\n                            ].shots.length - 2\n                        ].y,\n                    ],\n                    {\n                        stroke: arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].color,\n                        strokeWidth: 2,\n                        selectable: false,\n                    }\n                );\n\n                let group = new fabric.Group([p, line, circle], {\n                    selectable: false\n                })\n                // group.add(p)\n                // group.add(line)\n                // group.add(circle)\n\n                canvas.add(group);\n\n                arrayOfRallies.current.rallies[\n                    arrayOfRallies.current.currentActiveIndex\n                ].objectHistory.push(group);\n            }\n        });\n    };\n\n    /**\n     * Remove 1 element from Current Rally Object\n     * @updates arrayOfRallies\n     * @returns None\n     */\n\n    const undoLastArraySimulation = () => {\n        if (arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].shots.length === 0 ||\n            isNaN(arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].shots.length)) {\n\n            window.alert(\"No item to undo\", arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].shots.length)\n        }\n        else {\n            canvas.remove(arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].objectHistory[\n                arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].objectHistory.length - 1])\n\n            arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].objectHistory.pop()\n            arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].shots.pop()\n\n            if (arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].shots.length > 0) {\n                arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].lastY = checkHalfVertical(\n                    arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].shots[\n                        arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].shots.length - 1\n                    ].y\n                )\n            }\n        }\n    }\n\n    /**\n     * Remove all objects from all other rallies\n     * Keep only plotted points of current active index\n     * @updates None\n     * @return None\n     */\n\n    const clearAllFootworkObjects = () => {\n        for (let i = 0; i < arrayOfFootwork.current.footworks.length; i++) {\n            for (\n                let j = 0;\n                j < arrayOfFootwork.current.footworks[i].objectHistory.length;\n                j++\n            ) {\n                canvas.remove(arrayOfFootwork.current.footworks[i].objectHistory[j]);\n            }\n        }\n    };\n\n    /**\n     * Draw Footwork Objects on screen as per demand\n     * If only current one is to be displayed\n     * @param showCurrentOnly is set to true\n     * Else is set to false\n     */\n\n    const drawFootworkObjectsOnCanvas = (showCurrentOnly) => {\n        if (arrayOfFootwork.current.footworks.length === 0) {\n            return;\n        }\n        if (showCurrentOnly) {\n            for (\n                let i = 0;\n                i <\n                arrayOfFootwork.current.footworks[\n                    arrayOfFootwork.current.currentActiveIndex\n                ].objectHistory.length;\n                i++\n            ) {\n                canvas.add(\n                    arrayOfFootwork.current.footworks[\n                        arrayOfFootwork.current.currentActiveIndex\n                    ].objectHistory[i]\n                );\n            }\n        } else {\n            for (let i = 0; i < arrayOfFootwork.current.footworks.length; i++) {\n                for (\n                    let j = 0;\n                    j < arrayOfFootwork.current.footworks[i].objectHistory.length;\n                    j++\n                ) {\n                    canvas.add(arrayOfFootwork.current.footworks[i].objectHistory[j]);\n                }\n            }\n        }\n    };\n\n    /**\n     * Creates Footwork Movements, like a Rally\n     * This is available only on 1 side of court, wherever the point is first activated\n     * @param\n     * @returns none\n     * @updates {mode}\n     */\n\n    const constructFootwork = () => {\n        clearAllFootworkObjects();\n        clearAllRallyObjects()\n        if (showAllFootworks.current) {\n            drawFootworkObjectsOnCanvas(false);\n        } else {\n            drawFootworkObjectsOnCanvas(true);\n        }\n        clearMouseListeners();\n        setMode(\"Footwork\");\n        canvas.on(\"mouse:down\", (event) => {\n            // console.log(arrayOfRallies)\n            if (arrayOfFootwork.current.footworks.length === 0) {\n                window.alert(\n                    'No Footworks Created, press the \"+\" button to add footworks'\n                );\n                return;\n            }\n            let currentX = canvas.getPointer(event.e).x;\n            let currentY = canvas.getPointer(event.e).y;\n\n            // If array is empty, then do not check where Point has been placed\n            if (\n                arrayOfFootwork.current.footworks[\n                    arrayOfFootwork.current.currentActiveIndex\n                ].movements.length === 0\n            ) {\n                arrayOfFootwork.current.footworks[\n                    arrayOfFootwork.current.currentActiveIndex\n                ].movements.push({\n                    x: currentX,\n                    y: currentY,\n                });\n\n                // Set lastY value\n                arrayOfFootwork.current.footworks[\n                    arrayOfFootwork.current.currentActiveIndex\n                ].lastY = checkHalfVertical(currentY);\n\n                let rect = new fabric.Rect({\n                    height: 10,\n                    width: 10,\n                    left: currentX - 3,\n                    top: currentY - 3,\n                    fill: arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].color,\n                    selectable: false,\n                    stroke: arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].color,\n                    strokeWidth: 1,\n                });\n\n                let p = new fabric.IText(\n                    arrayOfFootwork.current.footworks[\n                        arrayOfFootwork.current.currentActiveIndex\n                    ].movements.length + \"\",\n                    {\n                        fontFamily: \"Quicksand\",\n                        stroke: arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].color,\n                        left: currentX + 12,\n                        top: currentY,\n                        fontSize: 20,\n                        editable: false,\n                        selectable: false,\n                    }\n                );\n\n                let group = new fabric.Group([p, rect], {\n                    selectable: false\n                })\n\n                canvas.add(group);\n\n                arrayOfFootwork.current.footworks[\n                    arrayOfFootwork.current.currentActiveIndex\n                ].objectHistory.push(group);\n            }\n\n            // Otherwise check in which half last Point was recorded\n            else if (\n                arrayOfFootwork.current.footworks[\n                    arrayOfFootwork.current.currentActiveIndex\n                ].movements.length > 0\n            ) {\n                // console.log(\"current \", currPointLocY)\n                // console.log(\"Compare \", curshotArray.lengthrPointLocY, rallyLastY)\n\n\n                arrayOfFootwork.current.footworks[\n                    arrayOfFootwork.current.currentActiveIndex\n                ].movements.push({\n                    x: currentX,\n                    y: currentY,\n                });\n\n                let rect = new fabric.Rect({\n                    height: 10,\n                    width: 10,\n                    left: currentX - 3,\n                    top: currentY - 3,\n                    fill: arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].color,\n                    selectable: false,\n                    stroke: arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].color,\n                    strokeWidth: 1,\n                });\n\n                let p = new fabric.IText(\n                    arrayOfFootwork.current.footworks[\n                        arrayOfFootwork.current.currentActiveIndex\n                    ].movements.length + \"\",\n                    {\n                        fontFamily: \"Quicksand\",\n                        stroke: arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].color,\n                        left: currentX + 12,\n                        top: currentY,\n                        fontSize: 20,\n                        editable: false,\n                        selectable: false,\n                    }\n                );\n\n                let line = new fabric.Line(\n                    [\n                        arrayOfFootwork.current.footworks[\n                            arrayOfFootwork.current.currentActiveIndex\n                        ].movements[\n                            arrayOfFootwork.current.footworks[\n                                arrayOfFootwork.current.currentActiveIndex\n                            ].movements.length - 1\n                        ].x,\n                        arrayOfFootwork.current.footworks[\n                            arrayOfFootwork.current.currentActiveIndex\n                        ].movements[\n                            arrayOfFootwork.current.footworks[\n                                arrayOfFootwork.current.currentActiveIndex\n                            ].movements.length - 1\n                        ].y,\n                        arrayOfFootwork.current.footworks[\n                            arrayOfFootwork.current.currentActiveIndex\n                        ].movements[\n                            arrayOfFootwork.current.footworks[\n                                arrayOfFootwork.current.currentActiveIndex\n                            ].movements.length - 2\n                        ].x,\n                        arrayOfFootwork.current.footworks[\n                            arrayOfFootwork.current.currentActiveIndex\n                        ].movements[\n                            arrayOfFootwork.current.footworks[\n                                arrayOfFootwork.current.currentActiveIndex\n                            ].movements.length - 2\n                        ].y,\n                    ],\n                    {\n                        stroke: arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].color,\n                        strokeWidth: 2,\n                        selectable: false,\n                    }\n                );\n\n                let group = new fabric.Group([p, line, rect], {\n                    selectable: false\n                })\n\n                canvas.add(group);\n\n                arrayOfFootwork.current.footworks[\n                    arrayOfFootwork.current.currentActiveIndex\n                ].objectHistory.push(group);\n\n            }\n        });\n    };\n\n    /**\n     * Remove 1 element from Current Rally Object\n     * @updates arrayOfRallies\n     * @returns None\n     */\n\n    const undoLastFootworkSimulation = () => {\n        if (arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].movements.length === 0 ||\n            isNaN(arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].movements.length)) {\n            window.alert(\"No item to undo\")\n        }\n        else {\n            canvas.remove(arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].objectHistory[\n                arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].objectHistory.length - 1])\n\n            arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].objectHistory.pop()\n            arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].movements.pop()\n\n            if (arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].movements.length > 0) {\n                arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].lastY = checkHalfVertical(\n                    arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].movements[\n                        arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].movements.length - 1\n                    ].y\n                )\n            }\n        }\n    }\n\n    /** Create a new rally in the state variable arrayOfRallies\n     * @updates {currentActiveIndex, arrayOfRallies}\n     * @returns none\n     * @problems previous state is reflected and does not ppend the current user inputed rally.\n     * Cannot find `shots` attribute in the newly created rally @resolved\n     */\n\n    function addRally() {\n        let x = arrayOfRallies.current.rallies.length;\n        if (x === undefined) {\n            x = 0;\n        }\n\n        arrayOfRallies.current.rallies.push({\n            name: rallyOrFootworkName.current.value,\n            shots: [],\n            lastY: -1,\n            color: randomColor({ luminosity: 'dark', }),\n            objectHistory: [],\n            lastActiveAnimation: -1,\n            lastActiveAnimationRef: null,\n        });\n\n        arrayOfRallies.current.currentActiveIndex = x;\n        forceUpdate();\n        constructRally();\n    }\n\n    /**\n     * Create a new footwork in the state variable arrayOfFootwork.currents\n     * @updates {currentActiveIndexFootwork, numFootworks, arrayOfFootwork.currents}\n     * @returns none\n     * @problems previous state is reflected and does not ppend the current user inputed footwork. Cannot find `movements` attribute in the newly created footwork\n     */\n    function addFootwork() {\n        let x = arrayOfFootwork.current.footworks.length;\n        if (x === undefined) {\n            x = 0;\n        }\n\n        arrayOfFootwork.current.footworks.push({\n            name: rallyOrFootworkName.current.value,\n            movements: [],\n            lastY: -1,\n            color: randomColor({ luminosity: 'dark', }),\n            objectHistory: [],\n            lastActiveAnimation: -1,\n            lastActiveAnimationRef: null,\n        });\n        arrayOfFootwork.current.currentActiveIndex = x;\n        forceUpdate();\n        constructFootwork();\n    }\n\n    /**\n     * Create a function that draws a line from 2 points of a generated rally\n     * After drawing a rally, it waits for 1 second\n     * Then it returns\n     * @returns None\n     */\n\n    const drawOneRallyLine = (img) => {\n        let lastActiveAnimation =\n            arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex]\n                .lastActiveAnimation;\n        if (lastActiveAnimation === -1) {\n            lastActiveAnimation = 0;\n        } else if (\n            lastActiveAnimation ===\n            arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex]\n                .shots.length -\n            1\n        ) {\n            lastActiveAnimation = 0;\n            return;\n\n        }\n\n        if (runFlag.current) {\n            let angle =\n                (Math.atan2(\n                    arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].shots[lastActiveAnimation].y -\n                    arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].shots[lastActiveAnimation + 1].y,\n                    arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].shots[lastActiveAnimation].x -\n                    arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].shots[lastActiveAnimation + 1].x\n                ) *\n                    180) /\n                Math.PI +\n                90;\n\n            let YVal = checkHalfVertical(arrayOfRallies.current.rallies[\n                arrayOfRallies.current.currentActiveIndex\n            ].shots[lastActiveAnimation].y)\n\n            console.log(YVal, \" : UO : \", lastActiveAnimation)\n            if (YVal === 1) {\n                img.set({\n                    left: arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].shots[lastActiveAnimation].x,\n                    top: arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].shots[lastActiveAnimation].y,\n                    angle: angle,\n                });\n                img.animate(\n                    {\n                        left: arrayOfRallies.current.rallies[\n                            arrayOfRallies.current.currentActiveIndex\n                        ].shots[lastActiveAnimation + 1].x,\n                        top: arrayOfRallies.current.rallies[\n                            arrayOfRallies.current.currentActiveIndex\n                        ].shots[lastActiveAnimation + 1].y,\n                    },\n                    {\n                        duration: 1000,\n                        onChange: canvas.renderAll.bind(canvas),\n                        onComplete: () => {\n                            console.log(\n                                lastActiveAnimation,\n                                \" : \",\n                                arrayOfRallies.current.rallies[\n                                    arrayOfRallies.current.currentActiveIndex\n                                ].shots.length - 2\n                            );\n                            if (\n                                lastActiveAnimation ===\n                                arrayOfRallies.current.rallies[\n                                    arrayOfRallies.current.currentActiveIndex\n                                ].shots.length -\n                                2\n                            ) {\n                                shuttleAnimationObject.current = null;\n                                canvas.remove(img);\n                                runFlag.current = false\n                                forceUpdate()\n                            }\n                        },\n                    }\n                );\n            }\n            else {\n                img.set({\n                    left: arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].shots[lastActiveAnimation].x,\n                    top: arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].shots[lastActiveAnimation].y,\n                    angle: angle,\n                });\n                img.animate(\n                    {\n                        left: arrayOfRallies.current.rallies[\n                            arrayOfRallies.current.currentActiveIndex\n                        ].shots[lastActiveAnimation + 1].x,\n                        top: arrayOfRallies.current.rallies[\n                            arrayOfRallies.current.currentActiveIndex\n                        ].shots[lastActiveAnimation + 1].y,\n                    },\n                    {\n                        duration: 1000,\n                        onChange: canvas.renderAll.bind(canvas),\n                        onComplete: () => {\n                            console.log(\n                                lastActiveAnimation,\n                                \" : \",\n                                arrayOfRallies.current.rallies[\n                                    arrayOfRallies.current.currentActiveIndex\n                                ].shots.length - 2\n                            );\n                            if (\n                                lastActiveAnimation ===\n                                arrayOfRallies.current.rallies[\n                                    arrayOfRallies.current.currentActiveIndex\n                                ].shots.length -\n                                2\n                            ) {\n                                shuttleAnimationObject.current = null;\n                                canvas.remove(img);\n                                runFlag.current = false\n                                forceUpdate()\n\n                            }\n                        },\n                    }\n                );\n            }\n            arrayOfRallies.current.rallies[\n                arrayOfRallies.current.currentActiveIndex\n            ].lastActiveAnimation = lastActiveAnimation + 1;\n        }\n    };\n\n    /**\n     * @repeat drawOneRallyLine() for current array\n     * @returns None\n     */\n\n    const runCurrentShuttleAnimation = () => {\n        if (arrayOfRallies.current.rallies[\n            arrayOfRallies.current.currentActiveIndex\n        ] === undefined) {\n            window.alert(\"Please add rally positions to run simulation\");\n            return\n        }\n        if (\n            isNaN(\n                arrayOfRallies.current.rallies[\n                    arrayOfRallies.current.currentActiveIndex\n                ].shots.length\n            ) ||\n            arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex]\n                .shots.length <= 0\n        ) {\n            window.alert(\"Please add rally positions to run simulation\");\n            console.log(\n                arrayOfRallies.current.rallies[\n                arrayOfRallies.current.currentActiveIndex\n                ],\n                arrayOfRallies.current.currentActiveIndex\n            );\n            return;\n        } else if (\n            arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex]\n                .shots.length === 1\n        ) {\n            window.alert(\n                \"Only 1 shot has been added, please add more than 1\"\n            );\n            return;\n        }\n\n        new fabric.Image.fromURL(Shuttle, (img) => {\n            if (shuttleAnimationObject.current === null) {\n                shuttleAnimationObject.current = img;\n                canvas.add(shuttleAnimationObject.current);\n                shuttleAnimationObject.current.scaleToWidth(40);\n            }\n\n            if (\n                arrayOfRallies.current.rallies[\n                    arrayOfRallies.current.currentActiveIndex\n                ].lastActiveAnimation ===\n                arrayOfRallies.current.rallies[\n                    arrayOfRallies.current.currentActiveIndex\n                ].shots.length -\n                1\n            ) {\n                arrayOfRallies.current.rallies[\n                    arrayOfRallies.current.currentActiveIndex\n                ].lastActiveAnimation = 0;\n            }\n\n            if (runFlag.current === false) {\n                runFlag.current = true\n            }\n\n            for (\n                let i =\n                    arrayOfRallies.current.rallies[\n                        arrayOfRallies.current.currentActiveIndex\n                    ].lastActiveAnimation,\n                waitFlag = 0;\n                i <\n                arrayOfRallies.current.rallies[\n                    arrayOfRallies.current.currentActiveIndex\n                ].shots.length -\n                1;\n                i++\n            ) {\n                forceUpdate()\n\n                if (i === -1) {\n                    continue;\n                }\n                console.log(i);\n                setTimeout(() => {\n                    drawOneRallyLine(shuttleAnimationObject.current);\n                }, waitFlag * 1000);\n                waitFlag++;\n            }\n        });\n    };\n\n    /**\n     * Create a function that draws a line from 2 points of a generated footwork\n     * After drawing a footwork movement, it returns call to\n     * @function runCurrentFootworkAnimation\n     * @returns None\n     */\n\n    const drawOneFootworkLine = (img) => {\n        let lastActiveAnimation =\n            arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex]\n                .lastActiveAnimation;\n        if (lastActiveAnimation === -1) {\n            lastActiveAnimation = 0;\n        } else if (\n            lastActiveAnimation ===\n            arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex]\n                .movements.length -\n            1\n        ) {\n            lastActiveAnimation = 0;\n            return;\n\n        }\n\n        if (runFlag.current) {\n            let angle\n            if (checkHalfVertical(arrayOfFootwork.current.footworks[\n                arrayOfFootwork.current.currentActiveIndex\n            ].movements[lastActiveAnimation].y) === 1) {\n                angle = 180\n            } else {\n                angle = 0\n            }\n            let YVal = checkHalfVertical(arrayOfFootwork.current.footworks[\n                arrayOfFootwork.current.currentActiveIndex\n            ].movements[lastActiveAnimation].y)\n\n            if (YVal === 1) {\n\n                img.set({\n                    left: arrayOfFootwork.current.footworks[\n                        arrayOfFootwork.current.currentActiveIndex\n                    ].movements[lastActiveAnimation].x + 30,\n                    top: arrayOfFootwork.current.footworks[\n                        arrayOfFootwork.current.currentActiveIndex\n                    ].movements[lastActiveAnimation].y + 20,\n                    angle: angle,\n                });\n                img.animate(\n                    {\n                        left: arrayOfFootwork.current.footworks[\n                            arrayOfFootwork.current.currentActiveIndex\n                        ].movements[lastActiveAnimation + 1].x + 30,\n                        top: arrayOfFootwork.current.footworks[\n                            arrayOfFootwork.current.currentActiveIndex\n                        ].movements[lastActiveAnimation + 1].y + 20,\n                    },\n                    {\n                        duration: 2000,\n                        onChange: canvas.renderAll.bind(canvas),\n                        onComplete: () => {\n                            console.log(\n                                lastActiveAnimation,\n                                \" : \",\n                                arrayOfFootwork.current.footworks[\n                                    arrayOfFootwork.current.currentActiveIndex\n                                ].movements.length - 2\n                            );\n                            if (\n                                lastActiveAnimation ===\n                                arrayOfFootwork.current.footworks[\n                                    arrayOfFootwork.current.currentActiveIndex\n                                ].movements.length -\n                                2\n                            ) {\n                                rightFootworkAnimationObject.current = null;\n                                canvas.remove(img);\n                                runFlag.current = false\n                                forceUpdate()\n                            }\n                        },\n                    }\n                );\n            }\n            else {\n                img.set({\n                    left: arrayOfFootwork.current.footworks[\n                        arrayOfFootwork.current.currentActiveIndex\n                    ].movements[lastActiveAnimation].x - 30,\n                    top: arrayOfFootwork.current.footworks[\n                        arrayOfFootwork.current.currentActiveIndex\n                    ].movements[lastActiveAnimation].y - 20,\n                    angle: angle,\n                });\n                img.animate(\n                    {\n                        left: arrayOfFootwork.current.footworks[\n                            arrayOfFootwork.current.currentActiveIndex\n                        ].movements[lastActiveAnimation + 1].x - 30,\n                        top: arrayOfFootwork.current.footworks[\n                            arrayOfFootwork.current.currentActiveIndex\n                        ].movements[lastActiveAnimation + 1].y - 20,\n                    },\n                    {\n                        duration: 2000,\n                        onChange: canvas.renderAll.bind(canvas),\n                        onComplete: () => {\n                            console.log(\n                                lastActiveAnimation,\n                                \" : \",\n                                arrayOfFootwork.current.footworks[\n                                    arrayOfFootwork.current.currentActiveIndex\n                                ].movements.length - 2\n                            );\n                            if (\n                                lastActiveAnimation ===\n                                arrayOfFootwork.current.footworks[\n                                    arrayOfFootwork.current.currentActiveIndex\n                                ].movements.length -\n                                2\n                            ) {\n                                rightFootworkAnimationObject.current = null;\n                                canvas.remove(img);\n                                runFlag.current = false\n                                forceUpdate()\n                            }\n                        },\n                    }\n                );\n            }\n\n            arrayOfFootwork.current.footworks[\n                arrayOfFootwork.current.currentActiveIndex\n            ].lastActiveAnimation = lastActiveAnimation + 1;\n        }\n    };\n\n    /**\n     * @repeat drawOneFoorworkLine() for current array\n     * @returns None\n     */\n\n    const runCurrentFootworkAnimation = () => {\n        if (arrayOfFootwork.current.footworks[\n            arrayOfFootwork.current.currentActiveIndex\n        ] === undefined) {\n            window.alert(\"Please add footwork positions to run simulation\");\n            return\n        }\n        if (\n            isNaN(\n                arrayOfFootwork.current.footworks[\n                    arrayOfFootwork.current.currentActiveIndex\n                ].movements.length\n            ) ||\n            arrayOfFootwork.current.footworks[\n                arrayOfFootwork.current.currentActiveIndex\n            ].movements.length <= 0\n        ) {\n            window.alert(\"Please add footwork positions to run simulation\");\n            console.log(\n                arrayOfFootwork.current.footworks[\n                arrayOfFootwork.current.currentActiveIndex\n                ],\n                arrayOfFootwork.current.currentActiveIndex\n            );\n            return;\n        } else if (\n            arrayOfFootwork.current.footworks[\n                arrayOfFootwork.current.currentActiveIndex\n            ].movements.length === 1\n        ) {\n            window.alert(\n                \"Only 1 footwork has been added, please add more than 1\"\n            );\n            return;\n        }\n\n        if (runFlag.current === false) {\n            runFlag.current = true\n        }\n\n        new fabric.Image.fromURL(RightBoot, (right) => {\n            new fabric.Image.fromURL(LeftBoot, (left) => {\n                if (rightFootworkAnimationObject.current === null || leftFootworkAnimationObject.current === null) {\n                    rightFootworkAnimationObject.current = right;\n                    leftFootworkAnimationObject.current = left;\n                    rightFootworkAnimationObject.current.set({\n                        right: 30, selectable: true\n                    })\n                    rightFootworkAnimationObject.current.scaleToWidth(40)\n                    leftFootworkAnimationObject.current.set({\n                        left: -30, selectable: true\n                    })\n                    rightFootworkAnimationObject.current.scaleToWidth(40)\n                    leftFootworkAnimationObject.current.scaleToWidth(40)\n\n                    footworkAnimationObject.current = new fabric.Group([left, right])\n\n                    footworkAnimationObject.current.add(rightFootworkAnimationObject.current);\n                    footworkAnimationObject.current.add(leftFootworkAnimationObject.current);\n                    // footworkAnimationObject.current.scaleToWidth(40)\n                    canvas.add(footworkAnimationObject.current)\n                }\n\n                if (\n                    arrayOfFootwork.current.footworks[\n                        arrayOfFootwork.current.currentActiveIndex\n                    ].lastActiveAnimation ===\n                    arrayOfFootwork.current.footworks[\n                        arrayOfFootwork.current.currentActiveIndex\n                    ].movements.length -\n                    1\n                ) {\n                    arrayOfFootwork.current.footworks[\n                        arrayOfFootwork.current.currentActiveIndex\n                    ].lastActiveAnimation = 0;\n                }\n\n                for (\n                    let i =\n                        arrayOfFootwork.current.footworks[\n                            arrayOfFootwork.current.currentActiveIndex\n                        ].lastActiveAnimation,\n                    waitFlag = 0;\n                    i <\n                    arrayOfFootwork.current.footworks[\n                        arrayOfFootwork.current.currentActiveIndex\n                    ].movements.length -\n                    1;\n                    i++\n                ) {\n                    forceUpdate()\n                    if (i === -1) {\n                        continue;\n                    }\n                    console.log(waitFlag);\n                    setTimeout(() => {\n                        drawOneFootworkLine(footworkAnimationObject.current);\n                    }, waitFlag * 2000);\n                    waitFlag++;\n                }\n            });\n            forceUpdate()\n        })\n    };\n\n    /**\n     * Displays the current number of rallies or footworks placed on the canvas by the user\n     * @returns the chakra.div for displaying the rallies and footworks\n     * @function {addRally, addFunction}\n     */\n\n    const setSimulationMenu = () => {\n        let ralliesOrFootwork = null;\n        let l = null;\n        if (mode === \"Rally\") {\n            l = arrayOfRallies.current.rallies;\n            if (l === undefined) {\n                l = [];\n            }\n            ralliesOrFootwork = \"Rallies\";\n        } else if (mode === \"Footwork\") {\n            l = arrayOfFootwork.current.footworks;\n            if (l === undefined) {\n                l = [];\n            }\n            ralliesOrFootwork = \"Footworks\";\n        } else {\n            l = [];\n            ralliesOrFootwork = \"Select Simulation\";\n        }\n        console.log(\"Currently Rendering : \", l, arrayOfFootwork.current.currentActiveIndex);\n        return (\n            <chakra.div w={\"100%\"} m={1} overflow='auto'>\n                <Center w=\"100%\">\n                    <VStack w=\"100%\">\n                        <Text fontSize={\"2xl\"}>{ralliesOrFootwork}</Text>\n                        <Flex as=\"p\" fontSize={\"2xl\"} mb={\"1vh\"}>\n                            {mode === \"Rally\" ? (\n                                <Checkbox\n                                    isChecked={showAllRallies.current}\n                                    onChange={(e) => {\n                                        showAllRallies.current = e.target.checked;\n                                        forceUpdate();\n                                        constructRally();\n                                    }}\n                                >\n                                    Show All\n                                </Checkbox>\n                            ) : null}\n                        </Flex>\n                        <Flex as=\"p\" fontSize={\"2xl\"} mb={\"1vh\"}>\n                            {mode === \"Footwork\" ? (\n                                <Checkbox\n                                    isChecked={showAllFootworks.current}\n                                    onChange={(e) => {\n                                        showAllFootworks.current = e.target.checked;\n                                        forceUpdate();\n                                        console.log(\"Called Footwork Now\");\n                                        constructFootwork();\n                                    }}\n                                >\n                                    Show All\n                                </Checkbox>\n                            ) : null}\n                        </Flex>\n                    </VStack>\n                </Center>\n\n                <chakra.div overflowY=\"auto\">\n                    <OrderedList justifyContent=\"center\" alignItems=\"left\" spacing=\"1\">\n                        {l.map((i, index) => (\n                            <ListItem key={index}>\n                                <Grid templateColumns=\"repeat(4, 1fr)\" gap={1}>\n                                    <GridItem colSpan={3}>\n                                        <Input\n                                            aria-colspan={8}\n                                            w={\"100%\"}\n                                            onClick={() => {\n                                                if (mode === \"Rally\") {\n                                                    arrayOfRallies.current.currentActiveIndex = index;\n                                                    clearMouseListeners();\n                                                    constructRally();\n                                                } else if (mode === \"Footwork\") {\n                                                    arrayOfFootwork.current.currentActiveIndex = index;\n                                                    clearMouseListeners();\n                                                    constructFootwork();\n                                                }\n                                            }}\n                                            value={i.name}\n                                            _hover={() => { }}\n                                            border={\"solid\"}\n                                            fill={i.color}\n                                            focusBorderColor={i.color}\n                                            borderColor={i.color}\n                                            defaultValue={i.name}\n                                            onChange={(e) => {\n                                                if (e.target.value === \"\") {\n                                                    e.target.placeholder = \"Enter some value\";\n                                                    forceUpdate();\n                                                    return;\n                                                }\n                                                if (mode === \"Rally\") {\n                                                    arrayOfRallies.current.rallies[\n                                                        arrayOfRallies.current.currentActiveIndex\n                                                    ].name = e.target.value;\n                                                } else if (mode === \"Footwork\") {\n                                                    arrayOfFootwork.current.footworks[\n                                                        arrayOfFootwork.current.currentActiveIndex\n                                                    ].name = e.target.value;\n                                                }\n                                                forceUpdate();\n                                            }}\n                                        />\n                                    </GridItem>\n                                    <GridItem colSpan={1}>\n                                        <Text\n                                            fontSize={\"3xl\"}\n                                            as=\"button\"\n                                            onClick={() => {\n                                                if (\n                                                    window.confirm(\n                                                        \"Do you really want to delete this item\"\n                                                    )\n                                                ) {\n                                                    if (mode === \"Rally\") {\n\n                                                        // Handle Object History\n                                                        if (showAllRallies.current || arrayOfRallies.current.currentActiveIndex === index) {\n                                                            for (let i = 0; i < arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].objectHistory.length; i++) {\n                                                                canvas.remove(arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].objectHistory[i])\n                                                            }\n                                                        }\n\n                                                        // Handle Current Active Index\n                                                        if (arrayOfRallies.current.rallies.length === 0) {\n                                                            arrayOfRallies.current.currentActiveIndex = -1\n                                                        }\n                                                        else if (index === arrayOfRallies.current.rallies.length - 1) {\n                                                            arrayOfRallies.current.currentActiveIndex = arrayOfRallies.current.rallies.length - 2\n                                                        }\n                                                        else {\n                                                            arrayOfRallies.current.currentActiveIndex = index\n                                                        }\n\n                                                        arrayOfRallies.current.rallies.splice(index, 1);\n                                                        forceUpdate();\n                                                        constructRally()\n                                                        return;\n                                                    }\n                                                    if (mode === \"Footwork\") {\n\n                                                        // Handle Object History\n                                                        if (showAllFootworks.current || arrayOfFootwork.current.currentActiveIndex === index) {\n                                                            for (let i = 0; i < arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].objectHistory.length; i++) {\n                                                                console.log(\"Deleting\")\n                                                                canvas.remove(arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].objectHistory[i])\n                                                            }\n                                                        }\n\n                                                        // Handle Current Active Index\n                                                        if (arrayOfFootwork.current.footworks.length === 0) {\n                                                            arrayOfFootwork.current.currentActiveIndex = -1\n                                                        }\n                                                        else if (index === arrayOfFootwork.current.footworks.length - 1) {\n                                                            arrayOfFootwork.current.currentActiveIndex = arrayOfFootwork.current.footworks.length - 2\n                                                        }\n                                                        else {\n                                                            arrayOfFootwork.current.currentActiveIndex = index\n                                                        }\n\n                                                        console.log(showAllFootworks.current, arrayOfFootwork.current.currentActiveIndex)\n                                                        arrayOfFootwork.current.footworks.splice(index, 1);\n                                                        forceUpdate();\n                                                        constructFootwork()\n                                                        return;\n                                                    }\n                                                }\n                                            }}\n                                        >\n                                            <MdDelete />\n                                        </Text>\n                                    </GridItem>\n                                </Grid>\n                            </ListItem>\n                        ))}\n                    </OrderedList>\n                </chakra.div>\n            </chakra.div>\n        );\n    };\n\n    /**\n     * Simulation Menu for Mobile Devices\n     * Does everything the same setSimulationMenu() does but with tweaks for mobile devices\n     * Displays the current number of rallies or footworks placed on the canvas by the user\n     * @returns the chakra.div for displaying the rallies and footworks\n     * @function {addRally, addFunction}\n     */\n\n    const setSimulationMenuForMobile = () => {\n        let ralliesOrFootwork = null;\n        let l = null;\n        if (mode === \"Rally\") {\n            l = arrayOfRallies.current.rallies;\n            if (l === undefined) {\n                l = [];\n            }\n            ralliesOrFootwork = \"Rallies\";\n        } else if (mode === \"Footwork\") {\n            l = arrayOfFootwork.current.footworks;\n            if (l === undefined) {\n                l = [];\n            }\n            ralliesOrFootwork = \"Footworks\";\n        } else {\n            l = [];\n            ralliesOrFootwork = \"Select Simulation\";\n        }\n        console.log(\"Currently Rendering : \", l, arrayOfFootwork.current.currentActiveIndex);\n        return (\n            <chakra.div w={\"100%\"} overflow='auto'>\n                <Center w=\"100%\">\n                    <VStack w=\"100%\">\n                        <Text fontSize={\"2xl\"}>{ralliesOrFootwork}</Text>\n                        <Flex as=\"p\" fontSize={\"2xl\"} mb={\"1vh\"}>\n                            {mode === \"Rally\" ? (\n                                <Checkbox\n                                    isChecked={showAllRallies.current}\n                                    onChange={(e) => {\n                                        showAllRallies.current = e.target.checked;\n                                        forceUpdate();\n                                        constructRally();\n                                    }}\n                                >\n                                    Show All\n                                </Checkbox>\n                            ) : null}\n                        </Flex>\n                        <Flex as=\"p\" fontSize={\"sm\"}>\n                            {mode === \"Footwork\" ? (\n                                <Checkbox\n                                    isChecked={showAllFootworks.current}\n                                    onChange={(e) => {\n                                        showAllFootworks.current = e.target.checked;\n                                        forceUpdate();\n                                        console.log(\"Called Footwork Now\");\n                                        constructFootwork();\n                                    }}\n                                >\n                                    Show All\n                                </Checkbox>\n                            ) : null}\n                        </Flex>\n                    </VStack>\n                </Center>\n\n                <chakra.div overflowY=\"auto\">\n                    <OrderedList justifyContent=\"center\" alignItems=\"left\" spacing=\"1\">\n                        {l.map((i, index) => (\n                            <ListItem key={index}>\n                                <Grid templateColumns=\"repeat(4, 1fr)\" gap={1}>\n                                    <GridItem colSpan={3}>\n                                        <Input\n                                            aria-colspan={8}\n                                            w={\"100%\"}\n                                            onClick={() => {\n                                                if (mode === \"Rally\") {\n                                                    arrayOfRallies.current.currentActiveIndex = index;\n                                                    clearMouseListeners();\n                                                    constructRally();\n                                                } else if (mode === \"Footwork\") {\n                                                    arrayOfFootwork.current.currentActiveIndex = index;\n                                                    clearMouseListeners();\n                                                    constructFootwork();\n                                                }\n                                            }}\n                                            value={i.name}\n                                            _hover={() => { }}\n                                            border={\"solid\"}\n                                            fill={i.color}\n                                            focusBorderColor={i.color}\n                                            borderColor={i.color}\n                                            defaultValue={i.name}\n                                            onChange={(e) => {\n                                                if (e.target.value === \"\") {\n                                                    e.target.placeholder = \"Enter some value\";\n                                                    forceUpdate();\n                                                    return;\n                                                }\n                                                if (mode === \"Rally\") {\n                                                    arrayOfRallies.current.rallies[\n                                                        arrayOfRallies.current.currentActiveIndex\n                                                    ].name = e.target.value;\n                                                } else if (mode === \"Footwork\") {\n                                                    arrayOfFootwork.current.footworks[\n                                                        arrayOfFootwork.current.currentActiveIndex\n                                                    ].name = e.target.value;\n                                                }\n                                                forceUpdate();\n                                            }}\n                                        />\n                                    </GridItem>\n                                    <GridItem colSpan={1}>\n                                        <Text\n                                            fontSize={\"3xl\"}\n                                            as=\"button\"\n                                            onClick={() => {\n                                                if (\n                                                    window.confirm(\n                                                        \"Do you really want to delete this item\"\n                                                    )\n                                                ) {\n                                                    if (mode === \"Rally\") {\n\n                                                        // Handle Object History\n                                                        if (showAllRallies.current || arrayOfRallies.current.currentActiveIndex === index) {\n                                                            for (let i = 0; i < arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].objectHistory.length; i++) {\n                                                                canvas.remove(arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].objectHistory[i])\n                                                            }\n                                                        }\n\n                                                        // Handle Current Active Index\n                                                        if (arrayOfRallies.current.rallies.length === 0) {\n                                                            arrayOfRallies.current.currentActiveIndex = -1\n                                                        }\n                                                        else if (index === arrayOfRallies.current.rallies.length - 1) {\n                                                            arrayOfRallies.current.currentActiveIndex = arrayOfRallies.current.rallies.length - 2\n                                                        }\n                                                        else {\n                                                            arrayOfRallies.current.currentActiveIndex = index\n                                                        }\n\n                                                        arrayOfRallies.current.rallies.splice(index, 1);\n                                                        forceUpdate();\n                                                        constructRally()\n                                                        return;\n                                                    }\n                                                    if (mode === \"Footwork\") {\n\n                                                        // Handle Object History\n                                                        if (showAllFootworks.current || arrayOfFootwork.current.currentActiveIndex === index) {\n                                                            for (let i = 0; i < arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].objectHistory.length; i++) {\n                                                                console.log(\"Deleting\")\n                                                                canvas.remove(arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].objectHistory[i])\n                                                            }\n                                                        }\n\n                                                        // Handle Current Active Index\n                                                        if (arrayOfFootwork.current.footworks.length === 0) {\n                                                            arrayOfFootwork.current.currentActiveIndex = -1\n                                                        }\n                                                        else if (index === arrayOfFootwork.current.footworks.length - 1) {\n                                                            arrayOfFootwork.current.currentActiveIndex = arrayOfFootwork.current.footworks.length - 2\n                                                        }\n                                                        else {\n                                                            arrayOfFootwork.current.currentActiveIndex = index\n                                                        }\n\n                                                        console.log(showAllFootworks.current, arrayOfFootwork.current.currentActiveIndex)\n                                                        arrayOfFootwork.current.footworks.splice(index, 1);\n                                                        forceUpdate();\n                                                        constructFootwork()\n                                                        return;\n                                                    }\n                                                }\n                                            }}\n                                        >\n                                            <MdDelete />\n                                        </Text>\n                                    </GridItem>\n                                </Grid>\n                            </ListItem>\n                        ))}\n                    </OrderedList>\n                </chakra.div>\n            </chakra.div>\n        );\n    };\n\n    /**\n     * Menu for showing Simulation Modes\n     */\n\n    const simulationOptions = [\n        {\n            name: \"Rally\",\n            icon: <GiShuttlecock />,\n            func: constructRally,\n        },\n        {\n            name: \"Footwork\",\n            icon: <RiFootprintFill />,\n            func: constructFootwork,\n        },\n    ];\n\n    /**\n     * Menu for showing operations that can be done on modes\n     */\n\n    const simulationOperations = [\n        {\n            name: \"New\",\n            icon: <BsPlusCircle />,\n            p: \"Create\",\n            colorScheme: \"blue\",\n            func: () => {\n                if (mode === \"Rally\" || mode === \"Footwork\") {\n                    onNameControlOpen();\n                } else {\n                    window.alert(\"Choose 1 of simulation operations\");\n                }\n            },\n        },\n        {\n            name: \"Run\",\n            icon: <BiPlayCircle />,\n            colorScheme: \"green\",\n            p: \"Run\",\n            func: () => {\n                if (mode === \"Rally\") {\n                    runCurrentShuttleAnimation();\n                } else if (mode === \"Footwork\") {\n                    runCurrentFootworkAnimation();\n                }\n            },\n        },\n        {\n            name: \"Pause\",\n            icon: <BiPauseCircle />,\n            colorScheme: \"yellow\",\n            p: \"Pause\",\n            func: () => {\n                runFlag.current = false\n            },\n        },\n        {\n            name: \"Stop\",\n            icon: <BiStopCircle />,\n            colorScheme: \"red\",\n            p: \"Stop\",\n            func: () => {\n                runFlag.current = false\n                if (mode === \"Rally\") {\n                    arrayOfRallies.current.rallies[arrayOfRallies.current.currentActiveIndex].lastActiveAnimation = 0\n                } else if (mode === \"Footwork\") {\n                    arrayOfFootwork.current.footworks[arrayOfFootwork.current.currentActiveIndex].lastActiveAnimation = 0\n                }\n\n            },\n        },\n        {\n            name: \"Undo\",\n            icon: <BiUndo />,\n            colorScheme: \"cyan\",\n            p: \"Undo\",\n            func: () => {\n                if (mode === \"Rally\") {\n                    undoLastArraySimulation()\n                } else if (mode === \"Footwork\") {\n                    undoLastFootworkSimulation()\n                }\n            },\n        },\n    ];\n\n    /**\n     * Recording Function Definitions\n     */\n\n    const startCanvasRecording = () => {\n        if (canvasRecorder.current !== null) {\n            if (window.confirm(\"Do you want to remove previous recording?\")) {\n                canvasStream.current = document.querySelector('canvas').captureStream(60)\n                canvasrecordingChunks.current = []\n                let options = { mimeType: 'video/webm' }\n                canvasRecorder.current = new MediaRecorder(canvasStream.current, options)\n                canvasRecorder.current.ondataavailable = (event) => {\n                    console.log(\"Data Available\")\n                    if (event.data.size > 0) {\n                        canvasrecordingChunks.current.push(event.data)\n                    }\n                }\n            }\n        } else {\n            canvasStream.current = document.querySelector('canvas').captureStream(60)\n            canvasrecordingChunks.current = []\n            let options = { mimeType: 'video/webm' }\n            canvasRecorder.current = new MediaRecorder(canvasStream.current, options)\n            canvasRecorder.current.ondataavailable = (event) => {\n                console.log(\"Data Available\")\n                if (event.data.size > 0) {\n                    canvasrecordingChunks.current.push(event.data)\n                }\n            }\n        }\n        canvasRecorder.current.start(1000)\n    }\n\n    const pauseOrResumeCanvasRecording = () => {\n        if (canvasRecorder.current === null || canvasRecorder.current.state === \"inactive\") {\n            window.alert(\"Start Recording before pausing!\")\n            return\n        }\n        if (canvasRecorder.current.state === \"paused\") {\n            canvasRecorder.current.resume()\n        } else {\n            canvasRecorder.current.pause()\n        }\n        forceUpdate()\n    }\n\n    const stopCanvasRecording = () => {\n        if (canvasRecorder.current === null) {\n            window.alert(\"Nothing to Pause\")\n        } else {\n            canvasRecorder.current.stop()\n            forceUpdate()\n        }\n    }\n\n    const downloadCanvasRecording = () => {\n        let blob = new Blob(canvasrecordingChunks.current, {\n            type: \"video/mp4\"\n        })\n        download(blob, canvasTitle.current + \".mp4\")\n    }\n\n\n    /**\n     * Advanced operation modes\n     */\n\n    const recordingOperations = [\n        {\n            name: \"Start Recording\",\n            icon: <BiVideoRecording />,\n            func: startCanvasRecording,\n        },\n        {\n            name: \"Pause Recording\",\n            icon: (canvasRecorder.current === null || canvasRecorder.current.state === \"paused\") ? <BsPlayFill /> : <BsPauseFill />,\n            func: pauseOrResumeCanvasRecording,\n        },\n        {\n            name: \"Stop Recording\",\n            icon: <BsStopFill />,\n            func: stopCanvasRecording,\n        },\n        {\n            name: \"Download Recording\",\n            icon: <BsDownload />,\n            func: downloadCanvasRecording,\n        }\n    ];\n\n    /**\n     * left panel displays properties of selected object and can be dynamicaly changed\n     */\n    const leftPanel = [\n        {\n            name: \"Fill\",\n            prop: \"fill\",\n            type: \"button\"\n        },\n        {\n            name: \"Border\",\n            prop: \"stroke\",\n            type: \"button\"\n        },\n        {\n            name: \"Border Width\",\n            prop: \"strokeWidth\",\n            type: \"number\"\n        },\n    ];\n\n    /**\n     * Handle Property change in Pop over\n     */\n\n    const handleProperties = () => {\n        return (\n            leftPanel.map((obj, index) => {\n                return (\n                    <Accordion allowToggle defaultIndex={[0]} key={obj.name}>\n                        <AccordionItem isDisabled={currentObject === null}>\n                            <AccordionButton>\n                                <Box flex='1' textAlign='left'>\n                                    {obj.name}\n                                </Box>\n                            </AccordionButton>\n                            <AccordionPanel>\n                                <Box>\n                                    {\n                                        obj.type === 'button' ?\n                                            handleButtonProps(obj) : null\n                                    }\n                                    {\n                                        obj.type === 'number' ? handleNumberProps(obj) : null\n                                    }\n                                </Box>\n                            </AccordionPanel>\n                        </AccordionItem>\n                    </Accordion>\n\n                );\n            })\n        )\n    }\n\n    /**\n     * Handle Button based Properties\n     * of Object Properties\n     */\n\n    const handleButtonProps = (obj) => {\n        const list = [\"#d4edad\", \"#82cdcd\", \"#eedd82\", \"#82cda8\", \"#82a8cd\", \"#cd8282\", \"orange\", \"yellow\", \"red\", \"teal\", \"blue\", \"cyan\", \"purple\", \"pink\"]\n        return (\n            list.map((item) => (\n                <Button key={item} bg={item} value={item} m=\"1\" borderRadius={'100%'} size='sm' onClick={\n                    () => {\n                        if (currentObject !== null) {\n                            let property = obj.prop\n                            currentObject.set(property, item)\n                            currentObject.set({\n                                selectable: true\n                            })\n                            canvas.renderAll()\n                        }\n                    }}> </Button>\n            ))\n        )\n    }\n\n    /**\n     * Handle Number based Properties\n     * of Object Properties\n     */\n\n    const handleNumberProps = (obj) => {\n        let property = obj.prop\n        return (\n            <Slider aria-label=\"slider-ex-1\" min={1} max={10} step={1} isDisabled={currentObject === null} defaultValue={1}\n                onChangeEnd={(val) => {\n                    console.log(val)\n                    currentObject.set(property, val)\n                    canvas.renderAll()\n                }}>\n                <SliderTrack>\n                    <SliderFilledTrack bg='blue.400' />\n                </SliderTrack>\n                <SliderThumb />\n            </Slider>\n        )\n    }\n\n    /**\n     * Mode of Color as per colorModeValue\n     */\n\n    let currentBackgroundColor = useColorModeValue(\"white\", \"gray.800\");\n    let currentLineColor = useColorModeValue(\"gray.800\", \"white.200\");\n\n    return (\n        <chakra.div mt={() => {\n            if (isBrowser) {\n                return \"3vh\"\n            } else {\n                return 0\n            }\n        }}>\n            <Stack direction={[\"column\", \"row\"]}>\n                <Box display={() => {\n                    if (isBrowser) {\n                        return \"block\"\n                    } else {\n                        return \"none\"\n                    }\n                }}>\n                    <Box>\n                        <SimpleGrid columns={1} overflowY=\"auto\" overflow=\"hidden\">\n                            <Popover size='md' placement='right' colorScheme='cyan' arrowSize={20}>\n                                <PopoverTrigger>\n                                    <Button borderRadius={0}\n                                        fontSize={\"2xl\"}\n                                        w={\"100%\"}\n                                        color={currentLineColor}\n                                        bg={currentBackgroundColor}\n                                        _hover={() => { }}><VscSymbolProperty /></Button>\n                                </PopoverTrigger>\n                                <PopoverContent>\n                                    <PopoverArrow />\n                                    <PopoverCloseButton />\n                                    <PopoverHeader>Object Properties</PopoverHeader>\n                                    <PopoverBody>{handleProperties()}</PopoverBody>\n                                </PopoverContent>\n                            </Popover>\n                            {objectsMenu.map((item, idx) => {\n                                return (\n                                    <Box w={\"100%\"} key={item.name}>\n                                        <Tooltip label={item.name} key={idx}>\n                                            <Button\n                                                variant=\"ghost\"\n                                                borderRadius={0}\n                                                onClick={item.func}\n                                                color={currentLineColor}\n                                                fontSize={\"xl\"}\n                                                bg={\n                                                    mode === item.name\n                                                        ? \"blue.400\"\n                                                        : currentBackgroundColor\n                                                }\n                                                _hover={() => { }}\n                                            >\n                                                {item.icon}\n                                            </Button>\n                                        </Tooltip>\n                                    </Box>\n                                );\n                            })}\n                        </SimpleGrid>\n                    </Box>\n                    <Box>\n                        <SimpleGrid\n                            columns={1}\n                            overflowY=\"auto\"\n                            flexGrow={1}\n                            overflow=\"hidden\"\n                        >\n                            <Popover size='md' placement='right' colorScheme='cyan' arrowSize={20}>\n                                <PopoverTrigger>\n                                    <Button borderRadius={0}\n                                        fontSize={\"2xl\"}\n                                        w={\"100%\"}\n                                        color={currentLineColor}\n                                        bg={currentBackgroundColor}\n                                        _hover={() => { }}><AiOutlineBgColors /></Button>\n                                </PopoverTrigger>\n                                <PopoverContent>\n                                    <PopoverArrow />\n                                    <PopoverCloseButton />\n                                    <PopoverHeader>Change Court's Background Color</PopoverHeader>\n                                    <PopoverBody>{selectCanvasBackground()}</PopoverBody>\n                                </PopoverContent>\n                            </Popover>\n                        </SimpleGrid>\n                    </Box>\n                    <Box>\n                        <SimpleGrid\n                            columns={1}\n                            overflowY=\"auto\"\n                            flexGrow={1}\n                            overflow=\"hidden\"\n                        >\n                            {canvasControlMenu.map((item, idx) => {\n                                return (\n                                    <Box w={\"100%\"} key={item.name}>\n                                        <Tooltip label={item.name}>\n                                            <Button\n                                                borderRadius={0}\n                                                onClick={item.func}\n                                                fontSize={\"2xl\"}\n                                                w={\"100%\"}\n                                                color={currentLineColor}\n                                                bg={\n                                                    mode === item.name\n                                                        ? \"blue.400\"\n                                                        : currentBackgroundColor\n                                                }\n                                                _hover={() => { }}\n                                            >\n                                                {item.icon}\n                                            </Button>\n                                        </Tooltip>\n                                    </Box>\n                                );\n                            })}\n                        </SimpleGrid>\n                    </Box>\n                </Box>\n\n                <Box display={() => {\n                    if (isBrowser) {\n                        return \"block\"\n                    } else {\n                        return \"none\"\n                    }\n                }}>\n                    <Box alignContent=\"center\">\n                        <SimpleGrid\n                            flexGrow={1}\n                            columns={1}\n                            overflowY=\"auto\"\n                            overflow=\"hidden\"\n                        >\n                            {simulationOptions.map((item, idx) => {\n                                return (\n                                    <Box w={\"100%\"} key={item.name}>\n                                        <Tooltip label={item.name}>\n                                            <Button\n                                                _hover={() => { }}\n                                                borderRadius={0}\n                                                onClick={item.func}\n                                                fontSize={\"xl\"}\n                                                w={\"100%\"}\n                                                color={currentLineColor}\n                                                bg={\n                                                    mode === item.name\n                                                        ? \"blue.400\"\n                                                        : currentBackgroundColor\n                                                }\n                                            >\n                                                {item.icon}\n                                            </Button>\n                                        </Tooltip>\n                                    </Box>\n                                );\n                            })}\n                        </SimpleGrid>\n                    </Box>\n                    <Box>\n                        <VStack flexGrow={1}>\n                            <SimpleGrid columns={1} overflow=\"hidden\">\n                                {simulationOperations.map((item, idx) => {\n                                    return (\n                                        <Box w=\"100%\" key={item.name} display={item.name === \"Undo\" && runFlag.current === true ? \"none\" : \"flex\"}>\n                                            <Tooltip label={item.name} key={idx}>\n                                                <Button\n                                                    _hover={() => { }}\n                                                    variant=\"ghost\"\n                                                    borderRadius={0}\n                                                    onClick={item.func}\n                                                    fontSize={\"xl\"}\n                                                    w={\"100%\"}\n                                                >\n                                                    {item.icon}\n                                                </Button>\n                                            </Tooltip>\n                                        </Box>\n                                    );\n                                })}\n                            </SimpleGrid>\n                            <SimpleGrid\n                                w={\"100%\"}\n                                columns={1}\n                                maxH={\"30vh\"}\n                                overflow=\"hidden\"\n                            >\n                                {recordingOperations.map((item, idx) => {\n                                    return (\n                                        <Box\n                                            w=\"100%\"\n                                            key={item.name}\n                                        >\n                                            <Tooltip label={item.name} key={idx}>\n                                                <Button\n                                                    bg={() => {\n                                                        if (idx === 0) {\n                                                            if (canvasRecorder.current === null || canvasRecorder.current.state === \"inactive\") {\n                                                                return (colorMode === \"light\") ? \"gray.300\" : \"gray.500\"\n                                                            } else if (canvasRecorder.current.state === \"recording\") {\n                                                                return \"red.400\"\n                                                            } else if (canvasRecorder.current.state === \"paused\") {\n                                                                return \"cyan.400\"\n                                                            } else {\n                                                                return \"green.400\"\n                                                            }\n                                                        } else return null\n                                                    }}\n                                                    _hover={() => { }}\n                                                    variant=\"ghost\"\n                                                    borderRadius={0}\n                                                    onClick={item.func}\n                                                    fontSize={\"xl\"}\n                                                    w={\"100%\"}\n                                                >\n                                                    {item.icon}\n                                                </Button>\n                                            </Tooltip>\n                                        </Box>\n                                    );\n                                })}\n                            </SimpleGrid>\n                        </VStack>\n                    </Box>\n                </Box>\n\n                <Box display={() => {\n                    if (isBrowser) {\n                        return \"block\"\n                    } else {\n                        return \"none\"\n                    }\n                }} w={\"20vw\"} m={\"2vw\"}>\n                    <VStack w={'100%'}>\n                        <Box w={'100%'} >\n                            <chakra.div fontSize={'2xl'} color={useColorModeValue('red.500', 'red.300')}>\n                                Rack\n                            </chakra.div>\n                            <chakra.div fontSize={'2xl'} color={useColorModeValue('black', 'white')}>\n                                Tech\n                            </chakra.div>\n                        </Box>\n                        <Box w={'100%'} >\n                            <Text fontSize={'lg'}>\n                                FALA - Whiteboard\n                            </Text>\n                        </Box>\n                        <Box mt={2} w={'100%'}>\n                            <Input value={canvasTitle.current} onChange={(e) => {\n                                canvasTitle.current = e.target.value\n                                forceUpdate()\n                            }}></Input>\n                        </Box>\n                        <Box mt={2} w={'100%'}>\n                            {setSimulationMenu()}\n                        </Box>\n                    </VStack>\n                </Box>\n\n                <Box\n                    border='solid'\n                    borderWidth='2px'\n                    w={() => {\n                        if (isMobile || isTablet) {\n                            return \"100vw\"\n                        } else {\n                            return \"60vw\"\n                        }\n                    }}\n                    minW={\"60vw\"}\n                    h={() => {\n                        if (isMobile || isTablet) {\n                            return \"85vh\"\n                        } else {\n                            return \"90vh\"\n                        }\n                    }}\n                    ref={boxDiv}\n                >\n                    <canvas id=\"canvas\"></canvas>\n                </Box>\n\n            </Stack>\n\n            <Box display={() => {\n                if (isMobile || isTablet) {\n                    return \"flex\"\n                } else {\n                    return \"none\"\n                }\n            }} bg={useColorModeValue('red.500', 'red.500')}>\n                <SimpleGrid columns={5} w='100%' py={2}>\n                    <Button variant='ghost' onClick={onObjectsDrawerOpen} fontSize={'2xl'}><FaShapes /></Button>\n                    <Button variant='ghost' onClick={onControlsDrawerOpen} fontSize={'2xl'}><RiRemoteControl2Line /></Button>\n                    <Button variant='ghost' onClick={onSimulationControlsDrawerOpen} fontSize={'2xl'}><GiGears /></Button>\n                    <Button variant='ghost' onClick={onSimulationListsDrawerOpen} fontSize={'2xl'}><IoIosListBox /></Button>\n                    <Button variant='ghost' onClick={onPersonizationDrawerOpen} fontSize={'2xl'}><BiCustomize /></Button>\n\n                </SimpleGrid>\n\n                <Drawer isOpen={isObjectsDrawerOpen}\n                    placement='bottom'\n                    onClose={onObjectsDrawerClose}\n                >\n                    <DrawerOverlay />\n                    <DrawerContent>\n                        <DrawerCloseButton />\n                        <DrawerHeader>\n                            Objects\n                        </DrawerHeader>\n                        <DrawerBody>\n                            <Grid templateColumns='repeat(7, 1fr)' w='100%'>\n                                {objectsMenu.map((item, idx) => {\n                                    return (\n                                        <GridItem\n                                            key={item.name}\n                                            alignContent='start'\n                                            w='100%'\n                                            colSpan={7}\n                                            variant=\"ghost\"\n                                            borderRadius={0}\n                                            onClick={() => {\n                                                onObjectsDrawerClose()\n                                                item.func()\n                                            }}\n                                            color={currentLineColor}\n                                            fontSize={\"xl\"}\n                                            bg={\n                                                mode === item.name\n                                                    ? \"blue.400\"\n                                                    : currentBackgroundColor\n                                            }\n                                            _hover={() => { }}\n                                        >\n                                            <Button variant='ghost' w='100%' justifyContent='flex-start' leftIcon={item.icon}>\n                                                {item.name}\n                                            </Button>\n                                        </GridItem>\n                                    );\n                                })}\n                            </Grid>\n                        </DrawerBody>\n                    </DrawerContent>\n                </Drawer>\n\n                <Drawer isOpen={isControlsDrawerOpen}\n                    placement='bottom'\n                    onClose={onControlsDrawerClose}\n                >\n                    <DrawerOverlay />\n                    <DrawerContent>\n                        <DrawerCloseButton />\n                        <DrawerHeader>\n                            Controls\n                        </DrawerHeader>\n                        <DrawerBody>\n                            <Grid templateColumns='repeat(7, 1fr)' w='100%'>\n                                {canvasControlMenu.map((item, idx) => {\n                                    return (\n                                        <GridItem\n                                            key={item.name}\n                                            alignContent='start'\n                                            w='100%'\n                                            colSpan={7}\n                                            variant=\"ghost\"\n                                            borderRadius={0}\n                                            onClick={() => {\n                                                onControlsDrawerClose()\n                                                item.func()\n                                            }}\n                                            color={currentLineColor}\n                                            fontSize={\"xl\"}\n                                            bg={\n                                                mode === item.name\n                                                    ? \"blue.400\"\n                                                    : currentBackgroundColor\n                                            }\n                                            _hover={() => { }}\n                                        >\n                                            <Button variant='ghost' w='100%' justifyContent='flex-start' leftIcon={item.icon}>\n                                                {item.name}\n                                            </Button>\n                                        </GridItem>\n                                    );\n                                })}\n                                {recordingOperations.map((item, idx) => {\n                                    return (\n                                        <GridItem\n                                            key={item.name}\n                                            bg={() => {\n                                                if (idx === 0) {\n                                                    if (canvasRecorder.current === null || canvasRecorder.current.state === \"inactive\") {\n                                                        return (colorMode === \"light\") ? \"gray.300\" : \"gray.500\"\n                                                    } else if (canvasRecorder.current.state === \"recording\") {\n                                                        return \"red.400\"\n                                                    } else if (canvasRecorder.current.state === \"paused\") {\n                                                        return \"cyan.400\"\n                                                    } else {\n                                                        return \"green.400\"\n                                                    }\n                                                } else return (colorMode === \"light\" ? \"white\" : \"gray.800\")\n                                            }}\n                                            alignContent='start'\n                                            w='100%'\n                                            colSpan={7}\n                                            variant=\"ghost\"\n                                            borderRadius={0}\n                                            onClick={() => {\n                                                onControlsDrawerClose()\n                                                item.func()\n                                            }}\n                                            color={currentLineColor}\n                                            fontSize={\"xl\"}\n                                            _hover={() => { }}\n                                        >\n                                            <Button variant='ghost' w='100%' justifyContent='flex-start' leftIcon={item.icon}>\n                                                {item.name}\n                                            </Button>\n                                        </GridItem>\n                                    )\n                                })}\n                            </Grid>\n                        </DrawerBody>\n                    </DrawerContent>\n                </Drawer>\n\n                <Drawer isOpen={isSimulationControlsDrawerOpen}\n                    placement='bottom'\n                    onClose={onSimulationControlsDrawerClose}\n                >\n                    <DrawerOverlay />\n                    <DrawerContent>\n                        <DrawerCloseButton />\n                        <DrawerHeader>\n                            Simulation Controls\n                        </DrawerHeader>\n                        <DrawerBody>\n                            <Grid templateColumns='repeat(7, 1fr)' w='100%'>\n                                {simulationOptions.map((item, idx) => {\n                                    return (\n                                        <GridItem\n                                            key={item.name}\n                                            alignContent='start'\n                                            w='100%'\n                                            colSpan={7}\n                                            variant=\"ghost\"\n                                            borderRadius={0}\n                                            onClick={() => {\n                                                onSimulationControlsDrawerClose()\n                                                item.func()\n                                            }}\n                                            color={currentLineColor}\n                                            fontSize={\"xl\"}\n                                            bg={\n                                                mode === item.name\n                                                    ? \"blue.400\"\n                                                    : currentBackgroundColor\n                                            }\n                                            _hover={() => { }}\n                                        >\n                                            <Button variant='ghost' w='100%' justifyContent='flex-start' leftIcon={item.icon}>\n                                                {item.name}\n                                            </Button>\n                                        </GridItem>\n                                    );\n                                })}\n                                {simulationOperations.map((item, idx) => {\n                                    return (\n                                        <GridItem\n                                            key={item.name}\n                                            alignContent='start'\n                                            w='100%'\n                                            colSpan={7}\n                                            variant=\"ghost\"\n                                            borderRadius={0}\n                                            onClick={() => {\n                                                onSimulationControlsDrawerClose()\n                                                item.func()\n                                            }}\n                                            color={currentLineColor}\n                                            fontSize={\"xl\"}\n                                            bg={\n                                                mode === item.name\n                                                    ? \"blue.400\"\n                                                    : currentBackgroundColor\n                                            }\n                                            _hover={() => { }}\n                                        >\n                                            <Button variant='ghost' w='100%' justifyContent='flex-start' leftIcon={item.icon}>\n                                                {item.name}\n                                            </Button>\n                                        </GridItem>\n                                    );\n                                })}\n                            </Grid>\n                        </DrawerBody>\n                    </DrawerContent>\n                </Drawer>\n\n                <Drawer isOpen={isSimulationListsDrawerOpen}\n                    placement='bottom'\n                    onClose={onSimulationListsDrawerClose}\n                >\n                    <DrawerOverlay />\n                    <DrawerContent>\n                        <DrawerCloseButton />\n                        <DrawerHeader>\n                            Simulation Lists\n                        </DrawerHeader>\n                        <DrawerBody>\n                            <Grid templateColumns='repeat(7, 1fr)' w='100%'>\n                                <GridItem colSpan={7}>\n                                    {setSimulationMenuForMobile()}\n                                </GridItem>\n                            </Grid>\n                        </DrawerBody>\n                    </DrawerContent>\n                </Drawer>\n\n                <Drawer isOpen={isPersonizationDrawerOpen}\n                    placement='bottom'\n                    onClose={onPersonizationDrawerClose}\n                >\n                    <DrawerOverlay />\n                    <DrawerContent>\n                        <DrawerCloseButton />\n                        <DrawerHeader>\n                            Personalize\n                        </DrawerHeader>\n                        <DrawerBody>\n                            <Grid templateColumns='repeat(7, 1fr)' w='100%'>\n                                <GridItem colSpan={7} my={1}>\n                                    <Input value={canvasTitle.current} onChange={(e) => {\n                                        canvasTitle.current = e.target.value\n                                        forceUpdate()\n                                    }} />\n                                </GridItem>\n                            </Grid>\n                        </DrawerBody>\n                    </DrawerContent>\n                </Drawer>\n\n            </Box>\n\n\n            {/* Modal to take the user input for naming the rally or footwork */}\n            <Modal\n                isOpen={isNameControlOpen && (mode === \"Rally\" || mode === \"Footwork\")}\n                onClose={onNameControlClose}\n                size={'xs'}\n\n            >\n                <ModalOverlay />\n                <ModalContent>\n                    <ModalHeader>\n                        {mode === \"Rally\" ? \"Set Rally Name\" : \"Set Footwork Name\"}\n                    </ModalHeader>\n                    <ModalCloseButton />\n                    <ModalBody>\n                        <Input\n                            autoFocus\n                            placeholder={mode === \"Rally\" ? \"Rally Name\" : \"Footwork Name\"}\n                            ref={rallyOrFootworkName}\n                        />\n                    </ModalBody>\n\n                    <ModalFooter>\n                        <Button colorScheme=\"red\" mx=\"3\" onClick={onNameControlClose}>\n                            Close\n                        </Button>\n                        <Button\n                            colorScheme=\"blue\"\n                            onClick={mode === \"Rally\" ? addRally : addFootwork}\n                            onMouseUp={onNameControlClose}\n                        >\n                            Set Name\n                        </Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n\n            {/* Modal for saving canvas */}\n            <Modal\n                isOpen={isSaveCanvasOpen}\n                onClose={onSaveCanvasClose}\n                size={'xs'}\n\n            >\n                <ModalOverlay />\n                <ModalContent>\n                    <ModalHeader>\n                        Save Canvas Settings\n                    </ModalHeader>\n                    <ModalCloseButton />\n                    <ModalBody>\n                        <Input value={canvasTitle.current} onChange={(e) => {\n                            canvasTitle.current = e.target.value\n                            forceUpdate()\n                        }} />\n                        <Checkbox mt={3} onChange={(e) => {\n                            saveSettings.current.keepObjects = e.target.checked\n                            forceUpdate()\n                        }} >\n                            Keep Rallies and footwork objects\n                        </Checkbox>\n                        <Text mt={3}>\n                            Export As :\n                        </Text>\n                        <Select onChange={(e) => {\n                            saveSettings.current.exportAs = e.target.value\n                        }}>\n                            <option value='image/svg+xml;charset=utf-8'>\n                                SVG\n                            </option>\n                            <option value='image/png'>\n                                PNG\n                            </option>\n                            <option value='image/jpg'>\n                                JPG\n                            </option>\n                            <option value='text/plain'>\n                                JSON\n                            </option>\n                        </Select>\n\n                    </ModalBody>\n\n                    <ModalFooter>\n                        <Button colorScheme=\"red\" mx=\"3\" onClick={onSaveCanvasClose}>\n                            Close\n                        </Button>\n                        <Button\n                            colorScheme=\"blue\"\n                            onClick={downloadCanvas}\n                            onMouseUp={onNameControlClose}\n                        >\n                            Download\n                        </Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n\n        </chakra.div>\n    );\n}\n","import {\n    Box,\n    Center,\n    Heading,\n    Text,\n    Stack,\n    Image,\n} from '@chakra-ui/react';\n\nimport { isTablet } from 'react-device-detect';\n\n\nexport default function ButtonComponent(props) {\n    return (\n        <Center py={12}>\n            <Stack align={'center'}>\n                <Box\n                    role={'group'}\n                    p={4}\n                    maxW={'90%'}\n                    minH={() => {\n                        if (isTablet) {\n                            return '70vh'\n                        } else {\n                            return '50vh'\n                        }\n                    }}\n                    // overflow='scroll'\n                    w={'full'}\n                    bg={'whiteAlpha.800'}\n                    boxShadow={'xl'}\n                    border='1px'\n                    rounded={'lg'}\n                    pos={'relative'}\n                    zIndex={1}>\n                        <Center>\n                    <Heading fontSize={'2xl'} fontFamily={'body'} fontWeight={500} color='black'>\n                        {props.content.head}\n                    </Heading>\n                    </Center>\n                    <Box\n                        // rounded={'lg'}\n                        pos={'relative'}\n                        height={'200px'}\n                        _after={{\n                            transition: 'all .3s ease',\n                            content: '\"\"',\n                            w: 'full',\n                            h: 'full',\n                            pos: 'absolute',\n                            top: 5,\n                            left: 0,\n                            filter: 'blur(15px)',\n                            zIndex: -1,\n                        }}\n                        _groupHover={{\n                            _after: {\n                                filter: 'blur(20px)',\n                            },\n                        }}>\n                        <Image\n                            height={'100%'}\n                            width={'100%'}\n                            objectFit={'contain'}\n                            overflow={'initial'}\n                            src={props.img}\n                        />\n                    </Box>\n\n                    <Text pt={'4vh'} letterSpacing='tight' justifyContent='space-around' fontSize={'xl'} color={'black'}>\n                        {props.content.body}\n                    </Text>\n                </Box>\n            </Stack>\n        </Center>\n    );\n}","export default __webpack_public_path__ + \"static/media/Basic-Demonstration.efdab64b.svg\";","import {\n    SimpleGrid,\n    chakra\n} from '@chakra-ui/react'\n\nimport {\n    Link,\n} from 'react-router-dom'\n\n// import Layout3D from '../3D/Layout'\nimport ButtonComponent from './ButtonComponent'\n// import BasicDemo from '../templates/3D-templates/FrontCourt3D/BasicDemo'\nimport BasicDemoImg from '../templates/3D-templates/FrontCourt3D/Basic-Demonstration.svg'\n\n\nexport default function Templates() {\n    const templateMapper = [{\n        name: \"basicDemo\",\n        img: BasicDemoImg,\n        content: {\n            head: \"Basic Demo\",\n            body: \"A basic demonstration on 3D court for a Cross Court Toss/Clear with animations\"\n        },\n        path: \"/x\",\n        loader: BasicDemoImg,\n    }]\n    return (\n        <>\n            <SimpleGrid columns={[1, 2, 3]}>\n                {templateMapper.map((item) => {\n                    return (\n                        <chakra.div key={item.name}>\n                            <Link to={'/Front3D/:' + item.name}>\n                                <ButtonComponent img={item.img} content={item.content} />\n                            </Link>\n                        </chakra.div>\n                    )\n                })}\n            </SimpleGrid>\n        </>\n    )\n}","import {\n    HashRouter as Router,\n    Route,\n    Link,\n    Switch,\n    useParams\n} from 'react-router-dom'\nimport Layout2D from '../2D/Layout'\nimport Layout3D from '../3D/Layout'\nimport ButtonComponent from './ButtonComponent'\nimport Court2D from '../assets/Badminton_Court.svg'\nimport FrontCourt3D from '../assets/3d_court.svg'\nimport FrontCourt3DFlat from '../assets/3d_court_colored_flat.svg'\nimport SideCourt3D from '../assets/Side_view.svg'\nimport SideCourt3DFlat from '../assets/Side_view_flat.svg'\nimport BasicDemoImg from \"../templates/3D-templates/FrontCourt3D/Basic-Demonstration.svg\"\nimport Templates from './templates'\n\nimport {\n    SimpleGrid,\n    Box,\n    chakra,\n    useColorModeValue,\n    useColorMode,\n    Flex,\n    Spacer\n} from '@chakra-ui/react'\nimport { BsSun, BsMoon } from 'react-icons/all'\n\nexport default function Dash() {\n    const LayoutComponentPopulated = () => {\n        const { templateName } = useParams<{ templateName: string }>()\n        console.log(\"Template Matcher :\", templateName)\n        return (\n            <Layout3D flat={'Front'} loader={templateMapper[0].loader} />)\n    }\n    const mapper = [{\n        img: null,\n        content: {\n            head: \"Blank Canvas\",\n            body: \"You can choose to do anything on the blank canvas, just like a blank piece of paper. Provides maximum customization\"\n        },\n        path: \"/blank\",\n        arg: \"\"\n    }, {\n        img: Court2D,\n        content: {\n            head: \"2D Court\",\n            body: \"2D Court is used for Potential Simulations and drill visualizations, it can help in many ways to understand positioning, movements \"\n                + \"and rally construction\"\n        },\n        path: \"/2D\",\n        arg: \"\"\n    },\n    {\n        img: FrontCourt3D,\n        content: {\n            head: \"3D Front View\",\n            body: \"Normal Broadcast Angle of Badminton, it helps to understand and visualize trajectories of hits as well as plan some drills as per convinience\"\n        },\n        path: \"/Front3D\",\n    },\n    {\n        img: FrontCourt3DFlat,\n        content: {\n            head: \"3D Front View Flat\",\n            body: \"Similar to Front 3D angle, but better for visualizations as a flatter preset means height and overall trajectory of shuttles and movements can be better visualized\"\n        },\n        path: \"/FrontFlat3D\",\n    },\n    {\n        img: SideCourt3D,\n        content: {\n            head: \"3D Side View\",\n            body: \"Sideways angle to look at court, along the sidelines, it is an intuitive way to visualize trajectories from the side, especially for upward shots\"\n        },\n        path: \"/Side3D\"\n    }, {\n        img: SideCourt3DFlat,\n        content: {\n            head: \"3D Side View Flat\",\n            body: \"Similar to Side View, but a more flatter court for better visualizations, just like Front Court Flat view\"\n        },\n        path: \"SideFlat3D\"\n    }, {\n        img: BasicDemoImg,\n        content: {\n            head: \"Templates for FALA\",\n            body: \"Some exciting readymade templates to use right away\"\n        },\n        path: \"Templates\"\n    }]\n    const templateMapper = [{\n        name: \"basicDemo\",\n        img: BasicDemoImg,\n        content: {\n            head: \"Basic Demo\",\n            body: \"A basic demonstration on 3D court for a Cross Court Toss/Clear with animations\"\n        },\n        path: \"/x\",\n        loader: BasicDemoImg,\n    }]\n    const { colorMode, toggleColorMode } = useColorMode();\n    return (\n        <Router>\n            { }\n            <Flex display={'flex'} bg={useColorModeValue('red.500', 'red.500')} pl={2} h={10}>\n                <chakra.div pt={1} fontSize={'2xl'} color={useColorModeValue('whiteAlpha.800', 'black')}>\n                    Rack\n                </chakra.div>\n                <chakra.div pt={1} fontSize={'2xl'} color={useColorModeValue('black', 'whiteAlpha.800')}>\n                    Tech\n                </chakra.div>\n                <Spacer />\n                <Box alignContent=\"flex-end\" fontSize={'xl'} onClick={toggleColorMode} as='button' p={2}>\n                    {colorMode === \"light\" ? <BsMoon /> : <BsSun />}\n                </Box>\n            </Flex>\n            <Switch>\n                <Route path='/' exact>\n                    <SimpleGrid columns={[1, 2, 3]}>\n                        {mapper.map((item) => {\n                            return (\n                                <Link to={item.path} key={item.path}>\n                                    <ButtonComponent img={item.img} content={item.content} />\n                                </Link>\n                            )\n                        })}\n                    </SimpleGrid>\n                </Route>\n                <Route path={'Front3D/:templateName'}>\n                    <LayoutComponentPopulated />\n                </Route>\n                <Route path='/blank'>\n                    <Layout3D />\n                </Route>\n                <Route path='/2D'>\n                    <Layout2D />\n                </Route>\n                <Route path='/Front3D'>\n                    <Layout3D flat={\"Front\"} />\n                </Route>\n                <Route path='/FrontFlat3D'>\n                    <Layout3D flat={\"Front_Flat\"} />\n                </Route>\n                <Route path='/Side3D'>\n                    <Layout3D flat={\"Side\"} />\n                </Route>\n                <Route path='/SideFlat3D'>\n                    <Layout3D flat={\"Side_Flat\"} />\n                </Route>\n\n                <Route path='/Templates'>\n                    <Templates />\n                </Route>\n            </Switch>\n        </Router>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  HashRouter\n} from 'react-router-dom'\nimport './index.css';\nimport Dash from './Dash/dash';\nimport { ChakraProvider } from '@chakra-ui/react'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <HashRouter>\n        <Dash />\n      </HashRouter>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}